// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/disism/saikan/ent/images"
	"github.com/disism/saikan/ent/musics"
	"github.com/disism/saikan/ent/playlists"
	"github.com/disism/saikan/ent/predicate"
	"github.com/disism/saikan/ent/users"
)

// PlaylistsUpdate is the builder for updating Playlists entities.
type PlaylistsUpdate struct {
	config
	hooks    []Hook
	mutation *PlaylistsMutation
}

// Where appends a list predicates to the PlaylistsUpdate builder.
func (pu *PlaylistsUpdate) Where(ps ...predicate.Playlists) *PlaylistsUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdateTime sets the "update_time" field.
func (pu *PlaylistsUpdate) SetUpdateTime(t time.Time) *PlaylistsUpdate {
	pu.mutation.SetUpdateTime(t)
	return pu
}

// SetName sets the "name" field.
func (pu *PlaylistsUpdate) SetName(s string) *PlaylistsUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PlaylistsUpdate) SetNillableName(s *string) *PlaylistsUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetDescription sets the "description" field.
func (pu *PlaylistsUpdate) SetDescription(s string) *PlaylistsUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *PlaylistsUpdate) SetNillableDescription(s *string) *PlaylistsUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *PlaylistsUpdate) ClearDescription() *PlaylistsUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetPrivate sets the "private" field.
func (pu *PlaylistsUpdate) SetPrivate(b bool) *PlaylistsUpdate {
	pu.mutation.SetPrivate(b)
	return pu
}

// SetNillablePrivate sets the "private" field if the given value is not nil.
func (pu *PlaylistsUpdate) SetNillablePrivate(b *bool) *PlaylistsUpdate {
	if b != nil {
		pu.SetPrivate(*b)
	}
	return pu
}

// SetOwnerID sets the "owner" edge to the Users entity by ID.
func (pu *PlaylistsUpdate) SetOwnerID(id uint64) *PlaylistsUpdate {
	pu.mutation.SetOwnerID(id)
	return pu
}

// SetOwner sets the "owner" edge to the Users entity.
func (pu *PlaylistsUpdate) SetOwner(u *Users) *PlaylistsUpdate {
	return pu.SetOwnerID(u.ID)
}

// AddMusicIDs adds the "musics" edge to the Musics entity by IDs.
func (pu *PlaylistsUpdate) AddMusicIDs(ids ...uint64) *PlaylistsUpdate {
	pu.mutation.AddMusicIDs(ids...)
	return pu
}

// AddMusics adds the "musics" edges to the Musics entity.
func (pu *PlaylistsUpdate) AddMusics(m ...*Musics) *PlaylistsUpdate {
	ids := make([]uint64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.AddMusicIDs(ids...)
}

// SetImageID sets the "image" edge to the Images entity by ID.
func (pu *PlaylistsUpdate) SetImageID(id uint64) *PlaylistsUpdate {
	pu.mutation.SetImageID(id)
	return pu
}

// SetNillableImageID sets the "image" edge to the Images entity by ID if the given value is not nil.
func (pu *PlaylistsUpdate) SetNillableImageID(id *uint64) *PlaylistsUpdate {
	if id != nil {
		pu = pu.SetImageID(*id)
	}
	return pu
}

// SetImage sets the "image" edge to the Images entity.
func (pu *PlaylistsUpdate) SetImage(i *Images) *PlaylistsUpdate {
	return pu.SetImageID(i.ID)
}

// Mutation returns the PlaylistsMutation object of the builder.
func (pu *PlaylistsUpdate) Mutation() *PlaylistsMutation {
	return pu.mutation
}

// ClearOwner clears the "owner" edge to the Users entity.
func (pu *PlaylistsUpdate) ClearOwner() *PlaylistsUpdate {
	pu.mutation.ClearOwner()
	return pu
}

// ClearMusics clears all "musics" edges to the Musics entity.
func (pu *PlaylistsUpdate) ClearMusics() *PlaylistsUpdate {
	pu.mutation.ClearMusics()
	return pu
}

// RemoveMusicIDs removes the "musics" edge to Musics entities by IDs.
func (pu *PlaylistsUpdate) RemoveMusicIDs(ids ...uint64) *PlaylistsUpdate {
	pu.mutation.RemoveMusicIDs(ids...)
	return pu
}

// RemoveMusics removes "musics" edges to Musics entities.
func (pu *PlaylistsUpdate) RemoveMusics(m ...*Musics) *PlaylistsUpdate {
	ids := make([]uint64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.RemoveMusicIDs(ids...)
}

// ClearImage clears the "image" edge to the Images entity.
func (pu *PlaylistsUpdate) ClearImage() *PlaylistsUpdate {
	pu.mutation.ClearImage()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PlaylistsUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlaylistsUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlaylistsUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlaylistsUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PlaylistsUpdate) defaults() {
	if _, ok := pu.mutation.UpdateTime(); !ok {
		v := playlists.UpdateDefaultUpdateTime()
		pu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PlaylistsUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := playlists.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Playlists.name": %w`, err)}
		}
	}
	if _, ok := pu.mutation.OwnerID(); pu.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Playlists.owner"`)
	}
	return nil
}

func (pu *PlaylistsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(playlists.Table, playlists.Columns, sqlgraph.NewFieldSpec(playlists.FieldID, field.TypeUint64))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdateTime(); ok {
		_spec.SetField(playlists.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(playlists.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(playlists.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.DescriptionCleared() {
		_spec.ClearField(playlists.FieldDescription, field.TypeString)
	}
	if value, ok := pu.mutation.Private(); ok {
		_spec.SetField(playlists.FieldPrivate, field.TypeBool, value)
	}
	if pu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playlists.OwnerTable,
			Columns: []string{playlists.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playlists.OwnerTable,
			Columns: []string{playlists.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.MusicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playlists.MusicsTable,
			Columns: playlists.MusicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(musics.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedMusicsIDs(); len(nodes) > 0 && !pu.mutation.MusicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playlists.MusicsTable,
			Columns: playlists.MusicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(musics.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.MusicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playlists.MusicsTable,
			Columns: playlists.MusicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(musics.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playlists.ImageTable,
			Columns: []string{playlists.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(images.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playlists.ImageTable,
			Columns: []string{playlists.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(images.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playlists.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PlaylistsUpdateOne is the builder for updating a single Playlists entity.
type PlaylistsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlaylistsMutation
}

// SetUpdateTime sets the "update_time" field.
func (puo *PlaylistsUpdateOne) SetUpdateTime(t time.Time) *PlaylistsUpdateOne {
	puo.mutation.SetUpdateTime(t)
	return puo
}

// SetName sets the "name" field.
func (puo *PlaylistsUpdateOne) SetName(s string) *PlaylistsUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PlaylistsUpdateOne) SetNillableName(s *string) *PlaylistsUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetDescription sets the "description" field.
func (puo *PlaylistsUpdateOne) SetDescription(s string) *PlaylistsUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *PlaylistsUpdateOne) SetNillableDescription(s *string) *PlaylistsUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *PlaylistsUpdateOne) ClearDescription() *PlaylistsUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetPrivate sets the "private" field.
func (puo *PlaylistsUpdateOne) SetPrivate(b bool) *PlaylistsUpdateOne {
	puo.mutation.SetPrivate(b)
	return puo
}

// SetNillablePrivate sets the "private" field if the given value is not nil.
func (puo *PlaylistsUpdateOne) SetNillablePrivate(b *bool) *PlaylistsUpdateOne {
	if b != nil {
		puo.SetPrivate(*b)
	}
	return puo
}

// SetOwnerID sets the "owner" edge to the Users entity by ID.
func (puo *PlaylistsUpdateOne) SetOwnerID(id uint64) *PlaylistsUpdateOne {
	puo.mutation.SetOwnerID(id)
	return puo
}

// SetOwner sets the "owner" edge to the Users entity.
func (puo *PlaylistsUpdateOne) SetOwner(u *Users) *PlaylistsUpdateOne {
	return puo.SetOwnerID(u.ID)
}

// AddMusicIDs adds the "musics" edge to the Musics entity by IDs.
func (puo *PlaylistsUpdateOne) AddMusicIDs(ids ...uint64) *PlaylistsUpdateOne {
	puo.mutation.AddMusicIDs(ids...)
	return puo
}

// AddMusics adds the "musics" edges to the Musics entity.
func (puo *PlaylistsUpdateOne) AddMusics(m ...*Musics) *PlaylistsUpdateOne {
	ids := make([]uint64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.AddMusicIDs(ids...)
}

// SetImageID sets the "image" edge to the Images entity by ID.
func (puo *PlaylistsUpdateOne) SetImageID(id uint64) *PlaylistsUpdateOne {
	puo.mutation.SetImageID(id)
	return puo
}

// SetNillableImageID sets the "image" edge to the Images entity by ID if the given value is not nil.
func (puo *PlaylistsUpdateOne) SetNillableImageID(id *uint64) *PlaylistsUpdateOne {
	if id != nil {
		puo = puo.SetImageID(*id)
	}
	return puo
}

// SetImage sets the "image" edge to the Images entity.
func (puo *PlaylistsUpdateOne) SetImage(i *Images) *PlaylistsUpdateOne {
	return puo.SetImageID(i.ID)
}

// Mutation returns the PlaylistsMutation object of the builder.
func (puo *PlaylistsUpdateOne) Mutation() *PlaylistsMutation {
	return puo.mutation
}

// ClearOwner clears the "owner" edge to the Users entity.
func (puo *PlaylistsUpdateOne) ClearOwner() *PlaylistsUpdateOne {
	puo.mutation.ClearOwner()
	return puo
}

// ClearMusics clears all "musics" edges to the Musics entity.
func (puo *PlaylistsUpdateOne) ClearMusics() *PlaylistsUpdateOne {
	puo.mutation.ClearMusics()
	return puo
}

// RemoveMusicIDs removes the "musics" edge to Musics entities by IDs.
func (puo *PlaylistsUpdateOne) RemoveMusicIDs(ids ...uint64) *PlaylistsUpdateOne {
	puo.mutation.RemoveMusicIDs(ids...)
	return puo
}

// RemoveMusics removes "musics" edges to Musics entities.
func (puo *PlaylistsUpdateOne) RemoveMusics(m ...*Musics) *PlaylistsUpdateOne {
	ids := make([]uint64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.RemoveMusicIDs(ids...)
}

// ClearImage clears the "image" edge to the Images entity.
func (puo *PlaylistsUpdateOne) ClearImage() *PlaylistsUpdateOne {
	puo.mutation.ClearImage()
	return puo
}

// Where appends a list predicates to the PlaylistsUpdate builder.
func (puo *PlaylistsUpdateOne) Where(ps ...predicate.Playlists) *PlaylistsUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PlaylistsUpdateOne) Select(field string, fields ...string) *PlaylistsUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Playlists entity.
func (puo *PlaylistsUpdateOne) Save(ctx context.Context) (*Playlists, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlaylistsUpdateOne) SaveX(ctx context.Context) *Playlists {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PlaylistsUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlaylistsUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PlaylistsUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdateTime(); !ok {
		v := playlists.UpdateDefaultUpdateTime()
		puo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PlaylistsUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := playlists.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Playlists.name": %w`, err)}
		}
	}
	if _, ok := puo.mutation.OwnerID(); puo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Playlists.owner"`)
	}
	return nil
}

func (puo *PlaylistsUpdateOne) sqlSave(ctx context.Context) (_node *Playlists, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(playlists.Table, playlists.Columns, sqlgraph.NewFieldSpec(playlists.FieldID, field.TypeUint64))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Playlists.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, playlists.FieldID)
		for _, f := range fields {
			if !playlists.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != playlists.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdateTime(); ok {
		_spec.SetField(playlists.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(playlists.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(playlists.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.DescriptionCleared() {
		_spec.ClearField(playlists.FieldDescription, field.TypeString)
	}
	if value, ok := puo.mutation.Private(); ok {
		_spec.SetField(playlists.FieldPrivate, field.TypeBool, value)
	}
	if puo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playlists.OwnerTable,
			Columns: []string{playlists.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playlists.OwnerTable,
			Columns: []string{playlists.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.MusicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playlists.MusicsTable,
			Columns: playlists.MusicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(musics.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedMusicsIDs(); len(nodes) > 0 && !puo.mutation.MusicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playlists.MusicsTable,
			Columns: playlists.MusicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(musics.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.MusicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playlists.MusicsTable,
			Columns: playlists.MusicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(musics.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playlists.ImageTable,
			Columns: []string{playlists.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(images.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playlists.ImageTable,
			Columns: []string{playlists.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(images.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Playlists{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playlists.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
