// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/disism/saikan/ent/files"
	"github.com/disism/saikan/ent/images"
)

// Images is the model entity for the Images schema.
type Images struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// IMAGE WIDTH
	Width int32 `json:"width,omitempty"`
	// IMAGE HEIGHT
	Height int32 `json:"height,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ImagesQuery when eager-loading is set.
	Edges        ImagesEdges `json:"edges"`
	files_images *uint64
	selectValues sql.SelectValues
}

// ImagesEdges holds the relations/edges for other nodes in the graph.
type ImagesEdges struct {
	// File holds the value of the file edge.
	File *Files `json:"file,omitempty"`
	// Albums holds the value of the albums edge.
	Albums []*Albums `json:"albums,omitempty"`
	// Playlists holds the value of the playlists edge.
	Playlists []*Playlists `json:"playlists,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// FileOrErr returns the File value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ImagesEdges) FileOrErr() (*Files, error) {
	if e.loadedTypes[0] {
		if e.File == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: files.Label}
		}
		return e.File, nil
	}
	return nil, &NotLoadedError{edge: "file"}
}

// AlbumsOrErr returns the Albums value or an error if the edge
// was not loaded in eager-loading.
func (e ImagesEdges) AlbumsOrErr() ([]*Albums, error) {
	if e.loadedTypes[1] {
		return e.Albums, nil
	}
	return nil, &NotLoadedError{edge: "albums"}
}

// PlaylistsOrErr returns the Playlists value or an error if the edge
// was not loaded in eager-loading.
func (e ImagesEdges) PlaylistsOrErr() ([]*Playlists, error) {
	if e.loadedTypes[2] {
		return e.Playlists, nil
	}
	return nil, &NotLoadedError{edge: "playlists"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Images) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case images.FieldID, images.FieldWidth, images.FieldHeight:
			values[i] = new(sql.NullInt64)
		case images.FieldCreateTime, images.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case images.ForeignKeys[0]: // files_images
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Images fields.
func (i *Images) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case images.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = uint64(value.Int64)
		case images.FieldCreateTime:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[j])
			} else if value.Valid {
				i.CreateTime = value.Time
			}
		case images.FieldUpdateTime:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[j])
			} else if value.Valid {
				i.UpdateTime = value.Time
			}
		case images.FieldWidth:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field width", values[j])
			} else if value.Valid {
				i.Width = int32(value.Int64)
			}
		case images.FieldHeight:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field height", values[j])
			} else if value.Valid {
				i.Height = int32(value.Int64)
			}
		case images.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field files_images", value)
			} else if value.Valid {
				i.files_images = new(uint64)
				*i.files_images = uint64(value.Int64)
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Images.
// This includes values selected through modifiers, order, etc.
func (i *Images) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QueryFile queries the "file" edge of the Images entity.
func (i *Images) QueryFile() *FilesQuery {
	return NewImagesClient(i.config).QueryFile(i)
}

// QueryAlbums queries the "albums" edge of the Images entity.
func (i *Images) QueryAlbums() *AlbumsQuery {
	return NewImagesClient(i.config).QueryAlbums(i)
}

// QueryPlaylists queries the "playlists" edge of the Images entity.
func (i *Images) QueryPlaylists() *PlaylistsQuery {
	return NewImagesClient(i.config).QueryPlaylists(i)
}

// Update returns a builder for updating this Images.
// Note that you need to call Images.Unwrap() before calling this method if this Images
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Images) Update() *ImagesUpdateOne {
	return NewImagesClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Images entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Images) Unwrap() *Images {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Images is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Images) String() string {
	var builder strings.Builder
	builder.WriteString("Images(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("create_time=")
	builder.WriteString(i.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(i.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("width=")
	builder.WriteString(fmt.Sprintf("%v", i.Width))
	builder.WriteString(", ")
	builder.WriteString("height=")
	builder.WriteString(fmt.Sprintf("%v", i.Height))
	builder.WriteByte(')')
	return builder.String()
}

// ImagesSlice is a parsable slice of Images.
type ImagesSlice []*Images
