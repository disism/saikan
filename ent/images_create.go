// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/disism/saikan/ent/albums"
	"github.com/disism/saikan/ent/files"
	"github.com/disism/saikan/ent/images"
	"github.com/disism/saikan/ent/playlists"
)

// ImagesCreate is the builder for creating a Images entity.
type ImagesCreate struct {
	config
	mutation *ImagesMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (ic *ImagesCreate) SetCreateTime(t time.Time) *ImagesCreate {
	ic.mutation.SetCreateTime(t)
	return ic
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ic *ImagesCreate) SetNillableCreateTime(t *time.Time) *ImagesCreate {
	if t != nil {
		ic.SetCreateTime(*t)
	}
	return ic
}

// SetUpdateTime sets the "update_time" field.
func (ic *ImagesCreate) SetUpdateTime(t time.Time) *ImagesCreate {
	ic.mutation.SetUpdateTime(t)
	return ic
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ic *ImagesCreate) SetNillableUpdateTime(t *time.Time) *ImagesCreate {
	if t != nil {
		ic.SetUpdateTime(*t)
	}
	return ic
}

// SetWidth sets the "width" field.
func (ic *ImagesCreate) SetWidth(i int32) *ImagesCreate {
	ic.mutation.SetWidth(i)
	return ic
}

// SetHeight sets the "height" field.
func (ic *ImagesCreate) SetHeight(i int32) *ImagesCreate {
	ic.mutation.SetHeight(i)
	return ic
}

// SetID sets the "id" field.
func (ic *ImagesCreate) SetID(u uint64) *ImagesCreate {
	ic.mutation.SetID(u)
	return ic
}

// SetFileID sets the "file" edge to the Files entity by ID.
func (ic *ImagesCreate) SetFileID(id uint64) *ImagesCreate {
	ic.mutation.SetFileID(id)
	return ic
}

// SetFile sets the "file" edge to the Files entity.
func (ic *ImagesCreate) SetFile(f *Files) *ImagesCreate {
	return ic.SetFileID(f.ID)
}

// AddAlbumIDs adds the "albums" edge to the Albums entity by IDs.
func (ic *ImagesCreate) AddAlbumIDs(ids ...uint64) *ImagesCreate {
	ic.mutation.AddAlbumIDs(ids...)
	return ic
}

// AddAlbums adds the "albums" edges to the Albums entity.
func (ic *ImagesCreate) AddAlbums(a ...*Albums) *ImagesCreate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ic.AddAlbumIDs(ids...)
}

// AddPlaylistIDs adds the "playlists" edge to the Playlists entity by IDs.
func (ic *ImagesCreate) AddPlaylistIDs(ids ...uint64) *ImagesCreate {
	ic.mutation.AddPlaylistIDs(ids...)
	return ic
}

// AddPlaylists adds the "playlists" edges to the Playlists entity.
func (ic *ImagesCreate) AddPlaylists(p ...*Playlists) *ImagesCreate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ic.AddPlaylistIDs(ids...)
}

// Mutation returns the ImagesMutation object of the builder.
func (ic *ImagesCreate) Mutation() *ImagesMutation {
	return ic.mutation
}

// Save creates the Images in the database.
func (ic *ImagesCreate) Save(ctx context.Context) (*Images, error) {
	ic.defaults()
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *ImagesCreate) SaveX(ctx context.Context) *Images {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *ImagesCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *ImagesCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *ImagesCreate) defaults() {
	if _, ok := ic.mutation.CreateTime(); !ok {
		v := images.DefaultCreateTime()
		ic.mutation.SetCreateTime(v)
	}
	if _, ok := ic.mutation.UpdateTime(); !ok {
		v := images.DefaultUpdateTime()
		ic.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *ImagesCreate) check() error {
	if _, ok := ic.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Images.create_time"`)}
	}
	if _, ok := ic.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Images.update_time"`)}
	}
	if _, ok := ic.mutation.Width(); !ok {
		return &ValidationError{Name: "width", err: errors.New(`ent: missing required field "Images.width"`)}
	}
	if _, ok := ic.mutation.Height(); !ok {
		return &ValidationError{Name: "height", err: errors.New(`ent: missing required field "Images.height"`)}
	}
	if _, ok := ic.mutation.FileID(); !ok {
		return &ValidationError{Name: "file", err: errors.New(`ent: missing required edge "Images.file"`)}
	}
	return nil
}

func (ic *ImagesCreate) sqlSave(ctx context.Context) (*Images, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *ImagesCreate) createSpec() (*Images, *sqlgraph.CreateSpec) {
	var (
		_node = &Images{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(images.Table, sqlgraph.NewFieldSpec(images.FieldID, field.TypeUint64))
	)
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ic.mutation.CreateTime(); ok {
		_spec.SetField(images.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := ic.mutation.UpdateTime(); ok {
		_spec.SetField(images.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := ic.mutation.Width(); ok {
		_spec.SetField(images.FieldWidth, field.TypeInt32, value)
		_node.Width = value
	}
	if value, ok := ic.mutation.Height(); ok {
		_spec.SetField(images.FieldHeight, field.TypeInt32, value)
		_node.Height = value
	}
	if nodes := ic.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   images.FileTable,
			Columns: []string{images.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(files.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.files_images = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.AlbumsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   images.AlbumsTable,
			Columns: []string{images.AlbumsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(albums.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.PlaylistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   images.PlaylistsTable,
			Columns: []string{images.PlaylistsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlists.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ImagesCreateBulk is the builder for creating many Images entities in bulk.
type ImagesCreateBulk struct {
	config
	err      error
	builders []*ImagesCreate
}

// Save creates the Images entities in the database.
func (icb *ImagesCreateBulk) Save(ctx context.Context) ([]*Images, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Images, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ImagesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *ImagesCreateBulk) SaveX(ctx context.Context) []*Images {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *ImagesCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *ImagesCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
