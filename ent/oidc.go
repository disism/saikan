// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/disism/saikan/ent/oidc"
)

// Oidc is the model entity for the Oidc schema.
type Oidc struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ConfigurationEndpoint holds the value of the "configuration_endpoint" field.
	ConfigurationEndpoint string `json:"configuration_endpoint,omitempty"`
	selectValues          sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Oidc) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oidc.FieldID:
			values[i] = new(sql.NullInt64)
		case oidc.FieldName, oidc.FieldConfigurationEndpoint:
			values[i] = new(sql.NullString)
		case oidc.FieldCreateTime, oidc.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Oidc fields.
func (o *Oidc) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oidc.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = uint64(value.Int64)
		case oidc.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				o.CreateTime = value.Time
			}
		case oidc.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				o.UpdateTime = value.Time
			}
		case oidc.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				o.Name = value.String
			}
		case oidc.FieldConfigurationEndpoint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field configuration_endpoint", values[i])
			} else if value.Valid {
				o.ConfigurationEndpoint = value.String
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Oidc.
// This includes values selected through modifiers, order, etc.
func (o *Oidc) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// Update returns a builder for updating this Oidc.
// Note that you need to call Oidc.Unwrap() before calling this method if this Oidc
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Oidc) Update() *OidcUpdateOne {
	return NewOidcClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Oidc entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Oidc) Unwrap() *Oidc {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Oidc is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Oidc) String() string {
	var builder strings.Builder
	builder.WriteString("Oidc(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("create_time=")
	builder.WriteString(o.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(o.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(o.Name)
	builder.WriteString(", ")
	builder.WriteString("configuration_endpoint=")
	builder.WriteString(o.ConfigurationEndpoint)
	builder.WriteByte(')')
	return builder.String()
}

// Oidcs is a parsable slice of Oidc.
type Oidcs []*Oidc
