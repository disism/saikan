// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/disism/saikan/ent/oidc"
	"github.com/disism/saikan/ent/predicate"
)

// OidcUpdate is the builder for updating Oidc entities.
type OidcUpdate struct {
	config
	hooks    []Hook
	mutation *OidcMutation
}

// Where appends a list predicates to the OidcUpdate builder.
func (ou *OidcUpdate) Where(ps ...predicate.Oidc) *OidcUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetUpdateTime sets the "update_time" field.
func (ou *OidcUpdate) SetUpdateTime(t time.Time) *OidcUpdate {
	ou.mutation.SetUpdateTime(t)
	return ou
}

// SetName sets the "name" field.
func (ou *OidcUpdate) SetName(s string) *OidcUpdate {
	ou.mutation.SetName(s)
	return ou
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ou *OidcUpdate) SetNillableName(s *string) *OidcUpdate {
	if s != nil {
		ou.SetName(*s)
	}
	return ou
}

// SetConfigurationEndpoint sets the "configuration_endpoint" field.
func (ou *OidcUpdate) SetConfigurationEndpoint(s string) *OidcUpdate {
	ou.mutation.SetConfigurationEndpoint(s)
	return ou
}

// SetNillableConfigurationEndpoint sets the "configuration_endpoint" field if the given value is not nil.
func (ou *OidcUpdate) SetNillableConfigurationEndpoint(s *string) *OidcUpdate {
	if s != nil {
		ou.SetConfigurationEndpoint(*s)
	}
	return ou
}

// Mutation returns the OidcMutation object of the builder.
func (ou *OidcUpdate) Mutation() *OidcMutation {
	return ou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OidcUpdate) Save(ctx context.Context) (int, error) {
	ou.defaults()
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OidcUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OidcUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OidcUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OidcUpdate) defaults() {
	if _, ok := ou.mutation.UpdateTime(); !ok {
		v := oidc.UpdateDefaultUpdateTime()
		ou.mutation.SetUpdateTime(v)
	}
}

func (ou *OidcUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(oidc.Table, oidc.Columns, sqlgraph.NewFieldSpec(oidc.FieldID, field.TypeUint64))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.UpdateTime(); ok {
		_spec.SetField(oidc.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := ou.mutation.Name(); ok {
		_spec.SetField(oidc.FieldName, field.TypeString, value)
	}
	if value, ok := ou.mutation.ConfigurationEndpoint(); ok {
		_spec.SetField(oidc.FieldConfigurationEndpoint, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oidc.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OidcUpdateOne is the builder for updating a single Oidc entity.
type OidcUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OidcMutation
}

// SetUpdateTime sets the "update_time" field.
func (ouo *OidcUpdateOne) SetUpdateTime(t time.Time) *OidcUpdateOne {
	ouo.mutation.SetUpdateTime(t)
	return ouo
}

// SetName sets the "name" field.
func (ouo *OidcUpdateOne) SetName(s string) *OidcUpdateOne {
	ouo.mutation.SetName(s)
	return ouo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ouo *OidcUpdateOne) SetNillableName(s *string) *OidcUpdateOne {
	if s != nil {
		ouo.SetName(*s)
	}
	return ouo
}

// SetConfigurationEndpoint sets the "configuration_endpoint" field.
func (ouo *OidcUpdateOne) SetConfigurationEndpoint(s string) *OidcUpdateOne {
	ouo.mutation.SetConfigurationEndpoint(s)
	return ouo
}

// SetNillableConfigurationEndpoint sets the "configuration_endpoint" field if the given value is not nil.
func (ouo *OidcUpdateOne) SetNillableConfigurationEndpoint(s *string) *OidcUpdateOne {
	if s != nil {
		ouo.SetConfigurationEndpoint(*s)
	}
	return ouo
}

// Mutation returns the OidcMutation object of the builder.
func (ouo *OidcUpdateOne) Mutation() *OidcMutation {
	return ouo.mutation
}

// Where appends a list predicates to the OidcUpdate builder.
func (ouo *OidcUpdateOne) Where(ps ...predicate.Oidc) *OidcUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OidcUpdateOne) Select(field string, fields ...string) *OidcUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Oidc entity.
func (ouo *OidcUpdateOne) Save(ctx context.Context) (*Oidc, error) {
	ouo.defaults()
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OidcUpdateOne) SaveX(ctx context.Context) *Oidc {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OidcUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OidcUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OidcUpdateOne) defaults() {
	if _, ok := ouo.mutation.UpdateTime(); !ok {
		v := oidc.UpdateDefaultUpdateTime()
		ouo.mutation.SetUpdateTime(v)
	}
}

func (ouo *OidcUpdateOne) sqlSave(ctx context.Context) (_node *Oidc, err error) {
	_spec := sqlgraph.NewUpdateSpec(oidc.Table, oidc.Columns, sqlgraph.NewFieldSpec(oidc.FieldID, field.TypeUint64))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Oidc.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oidc.FieldID)
		for _, f := range fields {
			if !oidc.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oidc.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.UpdateTime(); ok {
		_spec.SetField(oidc.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.Name(); ok {
		_spec.SetField(oidc.FieldName, field.TypeString, value)
	}
	if value, ok := ouo.mutation.ConfigurationEndpoint(); ok {
		_spec.SetField(oidc.FieldConfigurationEndpoint, field.TypeString, value)
	}
	_node = &Oidc{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oidc.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
