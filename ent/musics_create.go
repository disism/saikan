// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/disism/saikan/ent/albums"
	"github.com/disism/saikan/ent/artists"
	"github.com/disism/saikan/ent/files"
	"github.com/disism/saikan/ent/musics"
	"github.com/disism/saikan/ent/playlists"
	"github.com/disism/saikan/ent/users"
)

// MusicsCreate is the builder for creating a Musics entity.
type MusicsCreate struct {
	config
	mutation *MusicsMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (mc *MusicsCreate) SetCreateTime(t time.Time) *MusicsCreate {
	mc.mutation.SetCreateTime(t)
	return mc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (mc *MusicsCreate) SetNillableCreateTime(t *time.Time) *MusicsCreate {
	if t != nil {
		mc.SetCreateTime(*t)
	}
	return mc
}

// SetUpdateTime sets the "update_time" field.
func (mc *MusicsCreate) SetUpdateTime(t time.Time) *MusicsCreate {
	mc.mutation.SetUpdateTime(t)
	return mc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (mc *MusicsCreate) SetNillableUpdateTime(t *time.Time) *MusicsCreate {
	if t != nil {
		mc.SetUpdateTime(*t)
	}
	return mc
}

// SetName sets the "name" field.
func (mc *MusicsCreate) SetName(s string) *MusicsCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetDescription sets the "description" field.
func (mc *MusicsCreate) SetDescription(s string) *MusicsCreate {
	mc.mutation.SetDescription(s)
	return mc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (mc *MusicsCreate) SetNillableDescription(s *string) *MusicsCreate {
	if s != nil {
		mc.SetDescription(*s)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *MusicsCreate) SetID(u uint64) *MusicsCreate {
	mc.mutation.SetID(u)
	return mc
}

// AddUserIDs adds the "users" edge to the Users entity by IDs.
func (mc *MusicsCreate) AddUserIDs(ids ...uint64) *MusicsCreate {
	mc.mutation.AddUserIDs(ids...)
	return mc
}

// AddUsers adds the "users" edges to the Users entity.
func (mc *MusicsCreate) AddUsers(u ...*Users) *MusicsCreate {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return mc.AddUserIDs(ids...)
}

// SetFileID sets the "file" edge to the Files entity by ID.
func (mc *MusicsCreate) SetFileID(id uint64) *MusicsCreate {
	mc.mutation.SetFileID(id)
	return mc
}

// SetFile sets the "file" edge to the Files entity.
func (mc *MusicsCreate) SetFile(f *Files) *MusicsCreate {
	return mc.SetFileID(f.ID)
}

// AddArtistIDs adds the "artists" edge to the Artists entity by IDs.
func (mc *MusicsCreate) AddArtistIDs(ids ...uint64) *MusicsCreate {
	mc.mutation.AddArtistIDs(ids...)
	return mc
}

// AddArtists adds the "artists" edges to the Artists entity.
func (mc *MusicsCreate) AddArtists(a ...*Artists) *MusicsCreate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mc.AddArtistIDs(ids...)
}

// AddPlaylistIDs adds the "playlists" edge to the Playlists entity by IDs.
func (mc *MusicsCreate) AddPlaylistIDs(ids ...uint64) *MusicsCreate {
	mc.mutation.AddPlaylistIDs(ids...)
	return mc
}

// AddPlaylists adds the "playlists" edges to the Playlists entity.
func (mc *MusicsCreate) AddPlaylists(p ...*Playlists) *MusicsCreate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mc.AddPlaylistIDs(ids...)
}

// AddAlbumIDs adds the "albums" edge to the Albums entity by IDs.
func (mc *MusicsCreate) AddAlbumIDs(ids ...uint64) *MusicsCreate {
	mc.mutation.AddAlbumIDs(ids...)
	return mc
}

// AddAlbums adds the "albums" edges to the Albums entity.
func (mc *MusicsCreate) AddAlbums(a ...*Albums) *MusicsCreate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mc.AddAlbumIDs(ids...)
}

// Mutation returns the MusicsMutation object of the builder.
func (mc *MusicsCreate) Mutation() *MusicsMutation {
	return mc.mutation
}

// Save creates the Musics in the database.
func (mc *MusicsCreate) Save(ctx context.Context) (*Musics, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MusicsCreate) SaveX(ctx context.Context) *Musics {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MusicsCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MusicsCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MusicsCreate) defaults() {
	if _, ok := mc.mutation.CreateTime(); !ok {
		v := musics.DefaultCreateTime()
		mc.mutation.SetCreateTime(v)
	}
	if _, ok := mc.mutation.UpdateTime(); !ok {
		v := musics.DefaultUpdateTime()
		mc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MusicsCreate) check() error {
	if _, ok := mc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Musics.create_time"`)}
	}
	if _, ok := mc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Musics.update_time"`)}
	}
	if _, ok := mc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Musics.name"`)}
	}
	if v, ok := mc.mutation.Description(); ok {
		if err := musics.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Musics.description": %w`, err)}
		}
	}
	if len(mc.mutation.UsersIDs()) == 0 {
		return &ValidationError{Name: "users", err: errors.New(`ent: missing required edge "Musics.users"`)}
	}
	if _, ok := mc.mutation.FileID(); !ok {
		return &ValidationError{Name: "file", err: errors.New(`ent: missing required edge "Musics.file"`)}
	}
	return nil
}

func (mc *MusicsCreate) sqlSave(ctx context.Context) (*Musics, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MusicsCreate) createSpec() (*Musics, *sqlgraph.CreateSpec) {
	var (
		_node = &Musics{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(musics.Table, sqlgraph.NewFieldSpec(musics.FieldID, field.TypeUint64))
	)
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.CreateTime(); ok {
		_spec.SetField(musics.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := mc.mutation.UpdateTime(); ok {
		_spec.SetField(musics.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := mc.mutation.Name(); ok {
		_spec.SetField(musics.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mc.mutation.Description(); ok {
		_spec.SetField(musics.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if nodes := mc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   musics.UsersTable,
			Columns: musics.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   musics.FileTable,
			Columns: []string{musics.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(files.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.files_musics = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.ArtistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   musics.ArtistsTable,
			Columns: musics.ArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artists.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.PlaylistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   musics.PlaylistsTable,
			Columns: musics.PlaylistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlists.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.AlbumsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   musics.AlbumsTable,
			Columns: musics.AlbumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(albums.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MusicsCreateBulk is the builder for creating many Musics entities in bulk.
type MusicsCreateBulk struct {
	config
	err      error
	builders []*MusicsCreate
}

// Save creates the Musics entities in the database.
func (mcb *MusicsCreateBulk) Save(ctx context.Context) ([]*Musics, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Musics, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MusicsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MusicsCreateBulk) SaveX(ctx context.Context) []*Musics {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MusicsCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MusicsCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
