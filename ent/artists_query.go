// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/disism/saikan/ent/albums"
	"github.com/disism/saikan/ent/artists"
	"github.com/disism/saikan/ent/musics"
	"github.com/disism/saikan/ent/predicate"
)

// ArtistsQuery is the builder for querying Artists entities.
type ArtistsQuery struct {
	config
	ctx        *QueryContext
	order      []artists.OrderOption
	inters     []Interceptor
	predicates []predicate.Artists
	withMusics *MusicsQuery
	withAlbums *AlbumsQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ArtistsQuery builder.
func (aq *ArtistsQuery) Where(ps ...predicate.Artists) *ArtistsQuery {
	aq.predicates = append(aq.predicates, ps...)
	return aq
}

// Limit the number of records to be returned by this query.
func (aq *ArtistsQuery) Limit(limit int) *ArtistsQuery {
	aq.ctx.Limit = &limit
	return aq
}

// Offset to start from.
func (aq *ArtistsQuery) Offset(offset int) *ArtistsQuery {
	aq.ctx.Offset = &offset
	return aq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (aq *ArtistsQuery) Unique(unique bool) *ArtistsQuery {
	aq.ctx.Unique = &unique
	return aq
}

// Order specifies how the records should be ordered.
func (aq *ArtistsQuery) Order(o ...artists.OrderOption) *ArtistsQuery {
	aq.order = append(aq.order, o...)
	return aq
}

// QueryMusics chains the current query on the "musics" edge.
func (aq *ArtistsQuery) QueryMusics() *MusicsQuery {
	query := (&MusicsClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(artists.Table, artists.FieldID, selector),
			sqlgraph.To(musics.Table, musics.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, artists.MusicsTable, artists.MusicsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAlbums chains the current query on the "albums" edge.
func (aq *ArtistsQuery) QueryAlbums() *AlbumsQuery {
	query := (&AlbumsClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(artists.Table, artists.FieldID, selector),
			sqlgraph.To(albums.Table, albums.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, artists.AlbumsTable, artists.AlbumsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Artists entity from the query.
// Returns a *NotFoundError when no Artists was found.
func (aq *ArtistsQuery) First(ctx context.Context) (*Artists, error) {
	nodes, err := aq.Limit(1).All(setContextOp(ctx, aq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{artists.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (aq *ArtistsQuery) FirstX(ctx context.Context) *Artists {
	node, err := aq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Artists ID from the query.
// Returns a *NotFoundError when no Artists ID was found.
func (aq *ArtistsQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = aq.Limit(1).IDs(setContextOp(ctx, aq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{artists.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (aq *ArtistsQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := aq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Artists entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Artists entity is found.
// Returns a *NotFoundError when no Artists entities are found.
func (aq *ArtistsQuery) Only(ctx context.Context) (*Artists, error) {
	nodes, err := aq.Limit(2).All(setContextOp(ctx, aq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{artists.Label}
	default:
		return nil, &NotSingularError{artists.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (aq *ArtistsQuery) OnlyX(ctx context.Context) *Artists {
	node, err := aq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Artists ID in the query.
// Returns a *NotSingularError when more than one Artists ID is found.
// Returns a *NotFoundError when no entities are found.
func (aq *ArtistsQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = aq.Limit(2).IDs(setContextOp(ctx, aq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{artists.Label}
	default:
		err = &NotSingularError{artists.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (aq *ArtistsQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := aq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ArtistsSlice.
func (aq *ArtistsQuery) All(ctx context.Context) ([]*Artists, error) {
	ctx = setContextOp(ctx, aq.ctx, "All")
	if err := aq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Artists, *ArtistsQuery]()
	return withInterceptors[[]*Artists](ctx, aq, qr, aq.inters)
}

// AllX is like All, but panics if an error occurs.
func (aq *ArtistsQuery) AllX(ctx context.Context) []*Artists {
	nodes, err := aq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Artists IDs.
func (aq *ArtistsQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if aq.ctx.Unique == nil && aq.path != nil {
		aq.Unique(true)
	}
	ctx = setContextOp(ctx, aq.ctx, "IDs")
	if err = aq.Select(artists.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (aq *ArtistsQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := aq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (aq *ArtistsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, aq.ctx, "Count")
	if err := aq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, aq, querierCount[*ArtistsQuery](), aq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (aq *ArtistsQuery) CountX(ctx context.Context) int {
	count, err := aq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (aq *ArtistsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, aq.ctx, "Exist")
	switch _, err := aq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (aq *ArtistsQuery) ExistX(ctx context.Context) bool {
	exist, err := aq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ArtistsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (aq *ArtistsQuery) Clone() *ArtistsQuery {
	if aq == nil {
		return nil
	}
	return &ArtistsQuery{
		config:     aq.config,
		ctx:        aq.ctx.Clone(),
		order:      append([]artists.OrderOption{}, aq.order...),
		inters:     append([]Interceptor{}, aq.inters...),
		predicates: append([]predicate.Artists{}, aq.predicates...),
		withMusics: aq.withMusics.Clone(),
		withAlbums: aq.withAlbums.Clone(),
		// clone intermediate query.
		sql:  aq.sql.Clone(),
		path: aq.path,
	}
}

// WithMusics tells the query-builder to eager-load the nodes that are connected to
// the "musics" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtistsQuery) WithMusics(opts ...func(*MusicsQuery)) *ArtistsQuery {
	query := (&MusicsClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withMusics = query
	return aq
}

// WithAlbums tells the query-builder to eager-load the nodes that are connected to
// the "albums" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtistsQuery) WithAlbums(opts ...func(*AlbumsQuery)) *ArtistsQuery {
	query := (&AlbumsClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withAlbums = query
	return aq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Artists.Query().
//		GroupBy(artists.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (aq *ArtistsQuery) GroupBy(field string, fields ...string) *ArtistsGroupBy {
	aq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ArtistsGroupBy{build: aq}
	grbuild.flds = &aq.ctx.Fields
	grbuild.label = artists.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.Artists.Query().
//		Select(artists.FieldName).
//		Scan(ctx, &v)
func (aq *ArtistsQuery) Select(fields ...string) *ArtistsSelect {
	aq.ctx.Fields = append(aq.ctx.Fields, fields...)
	sbuild := &ArtistsSelect{ArtistsQuery: aq}
	sbuild.label = artists.Label
	sbuild.flds, sbuild.scan = &aq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ArtistsSelect configured with the given aggregations.
func (aq *ArtistsQuery) Aggregate(fns ...AggregateFunc) *ArtistsSelect {
	return aq.Select().Aggregate(fns...)
}

func (aq *ArtistsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range aq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, aq); err != nil {
				return err
			}
		}
	}
	for _, f := range aq.ctx.Fields {
		if !artists.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if aq.path != nil {
		prev, err := aq.path(ctx)
		if err != nil {
			return err
		}
		aq.sql = prev
	}
	return nil
}

func (aq *ArtistsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Artists, error) {
	var (
		nodes       = []*Artists{}
		_spec       = aq.querySpec()
		loadedTypes = [2]bool{
			aq.withMusics != nil,
			aq.withAlbums != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Artists).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Artists{config: aq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, aq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := aq.withMusics; query != nil {
		if err := aq.loadMusics(ctx, query, nodes,
			func(n *Artists) { n.Edges.Musics = []*Musics{} },
			func(n *Artists, e *Musics) { n.Edges.Musics = append(n.Edges.Musics, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withAlbums; query != nil {
		if err := aq.loadAlbums(ctx, query, nodes,
			func(n *Artists) { n.Edges.Albums = []*Albums{} },
			func(n *Artists, e *Albums) { n.Edges.Albums = append(n.Edges.Albums, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (aq *ArtistsQuery) loadMusics(ctx context.Context, query *MusicsQuery, nodes []*Artists, init func(*Artists), assign func(*Artists, *Musics)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uint64]*Artists)
	nids := make(map[uint64]map[*Artists]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(artists.MusicsTable)
		s.Join(joinT).On(s.C(musics.FieldID), joinT.C(artists.MusicsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(artists.MusicsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(artists.MusicsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := uint64(values[0].(*sql.NullInt64).Int64)
				inValue := uint64(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Artists]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Musics](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "musics" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (aq *ArtistsQuery) loadAlbums(ctx context.Context, query *AlbumsQuery, nodes []*Artists, init func(*Artists), assign func(*Artists, *Albums)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uint64]*Artists)
	nids := make(map[uint64]map[*Artists]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(artists.AlbumsTable)
		s.Join(joinT).On(s.C(albums.FieldID), joinT.C(artists.AlbumsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(artists.AlbumsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(artists.AlbumsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := uint64(values[0].(*sql.NullInt64).Int64)
				inValue := uint64(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Artists]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Albums](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "albums" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (aq *ArtistsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := aq.querySpec()
	_spec.Node.Columns = aq.ctx.Fields
	if len(aq.ctx.Fields) > 0 {
		_spec.Unique = aq.ctx.Unique != nil && *aq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, aq.driver, _spec)
}

func (aq *ArtistsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(artists.Table, artists.Columns, sqlgraph.NewFieldSpec(artists.FieldID, field.TypeUint64))
	_spec.From = aq.sql
	if unique := aq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if aq.path != nil {
		_spec.Unique = true
	}
	if fields := aq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, artists.FieldID)
		for i := range fields {
			if fields[i] != artists.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := aq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := aq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := aq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := aq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (aq *ArtistsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(aq.driver.Dialect())
	t1 := builder.Table(artists.Table)
	columns := aq.ctx.Fields
	if len(columns) == 0 {
		columns = artists.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if aq.sql != nil {
		selector = aq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if aq.ctx.Unique != nil && *aq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range aq.predicates {
		p(selector)
	}
	for _, p := range aq.order {
		p(selector)
	}
	if offset := aq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := aq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ArtistsGroupBy is the group-by builder for Artists entities.
type ArtistsGroupBy struct {
	selector
	build *ArtistsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (agb *ArtistsGroupBy) Aggregate(fns ...AggregateFunc) *ArtistsGroupBy {
	agb.fns = append(agb.fns, fns...)
	return agb
}

// Scan applies the selector query and scans the result into the given value.
func (agb *ArtistsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, agb.build.ctx, "GroupBy")
	if err := agb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ArtistsQuery, *ArtistsGroupBy](ctx, agb.build, agb, agb.build.inters, v)
}

func (agb *ArtistsGroupBy) sqlScan(ctx context.Context, root *ArtistsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(agb.fns))
	for _, fn := range agb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*agb.flds)+len(agb.fns))
		for _, f := range *agb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*agb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := agb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ArtistsSelect is the builder for selecting fields of Artists entities.
type ArtistsSelect struct {
	*ArtistsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (as *ArtistsSelect) Aggregate(fns ...AggregateFunc) *ArtistsSelect {
	as.fns = append(as.fns, fns...)
	return as
}

// Scan applies the selector query and scans the result into the given value.
func (as *ArtistsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, as.ctx, "Select")
	if err := as.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ArtistsQuery, *ArtistsSelect](ctx, as.ArtistsQuery, as, as.inters, v)
}

func (as *ArtistsSelect) sqlScan(ctx context.Context, root *ArtistsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(as.fns))
	for _, fn := range as.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*as.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := as.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
