// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/disism/saikan/ent/files"
	"github.com/disism/saikan/ent/musics"
)

// Musics is the model entity for the Musics schema.
type Musics struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MusicsQuery when eager-loading is set.
	Edges        MusicsEdges `json:"edges"`
	files_musics *uint64
	selectValues sql.SelectValues
}

// MusicsEdges holds the relations/edges for other nodes in the graph.
type MusicsEdges struct {
	// Users holds the value of the users edge.
	Users []*Users `json:"users,omitempty"`
	// File holds the value of the file edge.
	File *Files `json:"file,omitempty"`
	// Artists holds the value of the artists edge.
	Artists []*Artists `json:"artists,omitempty"`
	// Playlists holds the value of the playlists edge.
	Playlists []*Playlists `json:"playlists,omitempty"`
	// Albums holds the value of the albums edge.
	Albums []*Albums `json:"albums,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e MusicsEdges) UsersOrErr() ([]*Users, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// FileOrErr returns the File value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MusicsEdges) FileOrErr() (*Files, error) {
	if e.loadedTypes[1] {
		if e.File == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: files.Label}
		}
		return e.File, nil
	}
	return nil, &NotLoadedError{edge: "file"}
}

// ArtistsOrErr returns the Artists value or an error if the edge
// was not loaded in eager-loading.
func (e MusicsEdges) ArtistsOrErr() ([]*Artists, error) {
	if e.loadedTypes[2] {
		return e.Artists, nil
	}
	return nil, &NotLoadedError{edge: "artists"}
}

// PlaylistsOrErr returns the Playlists value or an error if the edge
// was not loaded in eager-loading.
func (e MusicsEdges) PlaylistsOrErr() ([]*Playlists, error) {
	if e.loadedTypes[3] {
		return e.Playlists, nil
	}
	return nil, &NotLoadedError{edge: "playlists"}
}

// AlbumsOrErr returns the Albums value or an error if the edge
// was not loaded in eager-loading.
func (e MusicsEdges) AlbumsOrErr() ([]*Albums, error) {
	if e.loadedTypes[4] {
		return e.Albums, nil
	}
	return nil, &NotLoadedError{edge: "albums"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Musics) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case musics.FieldID:
			values[i] = new(sql.NullInt64)
		case musics.FieldName, musics.FieldDescription:
			values[i] = new(sql.NullString)
		case musics.FieldCreateTime, musics.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case musics.ForeignKeys[0]: // files_musics
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Musics fields.
func (m *Musics) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case musics.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = uint64(value.Int64)
		case musics.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				m.CreateTime = value.Time
			}
		case musics.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				m.UpdateTime = value.Time
			}
		case musics.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				m.Name = value.String
			}
		case musics.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				m.Description = value.String
			}
		case musics.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field files_musics", value)
			} else if value.Valid {
				m.files_musics = new(uint64)
				*m.files_musics = uint64(value.Int64)
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Musics.
// This includes values selected through modifiers, order, etc.
func (m *Musics) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryUsers queries the "users" edge of the Musics entity.
func (m *Musics) QueryUsers() *UsersQuery {
	return NewMusicsClient(m.config).QueryUsers(m)
}

// QueryFile queries the "file" edge of the Musics entity.
func (m *Musics) QueryFile() *FilesQuery {
	return NewMusicsClient(m.config).QueryFile(m)
}

// QueryArtists queries the "artists" edge of the Musics entity.
func (m *Musics) QueryArtists() *ArtistsQuery {
	return NewMusicsClient(m.config).QueryArtists(m)
}

// QueryPlaylists queries the "playlists" edge of the Musics entity.
func (m *Musics) QueryPlaylists() *PlaylistsQuery {
	return NewMusicsClient(m.config).QueryPlaylists(m)
}

// QueryAlbums queries the "albums" edge of the Musics entity.
func (m *Musics) QueryAlbums() *AlbumsQuery {
	return NewMusicsClient(m.config).QueryAlbums(m)
}

// Update returns a builder for updating this Musics.
// Note that you need to call Musics.Unwrap() before calling this method if this Musics
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Musics) Update() *MusicsUpdateOne {
	return NewMusicsClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Musics entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Musics) Unwrap() *Musics {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Musics is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Musics) String() string {
	var builder strings.Builder
	builder.WriteString("Musics(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(m.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(m.Description)
	builder.WriteByte(')')
	return builder.String()
}

// MusicsSlice is a parsable slice of Musics.
type MusicsSlice []*Musics
