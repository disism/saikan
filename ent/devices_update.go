// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/disism/saikan/ent/devices"
	"github.com/disism/saikan/ent/predicate"
	"github.com/disism/saikan/ent/users"
)

// DevicesUpdate is the builder for updating Devices entities.
type DevicesUpdate struct {
	config
	hooks    []Hook
	mutation *DevicesMutation
}

// Where appends a list predicates to the DevicesUpdate builder.
func (du *DevicesUpdate) Where(ps ...predicate.Devices) *DevicesUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetUpdateTime sets the "update_time" field.
func (du *DevicesUpdate) SetUpdateTime(t time.Time) *DevicesUpdate {
	du.mutation.SetUpdateTime(t)
	return du
}

// SetIP sets the "ip" field.
func (du *DevicesUpdate) SetIP(s string) *DevicesUpdate {
	du.mutation.SetIP(s)
	return du
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (du *DevicesUpdate) SetNillableIP(s *string) *DevicesUpdate {
	if s != nil {
		du.SetIP(*s)
	}
	return du
}

// SetDevice sets the "device" field.
func (du *DevicesUpdate) SetDevice(s string) *DevicesUpdate {
	du.mutation.SetDevice(s)
	return du
}

// SetNillableDevice sets the "device" field if the given value is not nil.
func (du *DevicesUpdate) SetNillableDevice(s *string) *DevicesUpdate {
	if s != nil {
		du.SetDevice(*s)
	}
	return du
}

// SetUserID sets the "user" edge to the Users entity by ID.
func (du *DevicesUpdate) SetUserID(id uint64) *DevicesUpdate {
	du.mutation.SetUserID(id)
	return du
}

// SetNillableUserID sets the "user" edge to the Users entity by ID if the given value is not nil.
func (du *DevicesUpdate) SetNillableUserID(id *uint64) *DevicesUpdate {
	if id != nil {
		du = du.SetUserID(*id)
	}
	return du
}

// SetUser sets the "user" edge to the Users entity.
func (du *DevicesUpdate) SetUser(u *Users) *DevicesUpdate {
	return du.SetUserID(u.ID)
}

// Mutation returns the DevicesMutation object of the builder.
func (du *DevicesUpdate) Mutation() *DevicesMutation {
	return du.mutation
}

// ClearUser clears the "user" edge to the Users entity.
func (du *DevicesUpdate) ClearUser() *DevicesUpdate {
	du.mutation.ClearUser()
	return du
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DevicesUpdate) Save(ctx context.Context) (int, error) {
	du.defaults()
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DevicesUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DevicesUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DevicesUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (du *DevicesUpdate) defaults() {
	if _, ok := du.mutation.UpdateTime(); !ok {
		v := devices.UpdateDefaultUpdateTime()
		du.mutation.SetUpdateTime(v)
	}
}

func (du *DevicesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(devices.Table, devices.Columns, sqlgraph.NewFieldSpec(devices.FieldID, field.TypeUint64))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.UpdateTime(); ok {
		_spec.SetField(devices.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := du.mutation.IP(); ok {
		_spec.SetField(devices.FieldIP, field.TypeString, value)
	}
	if value, ok := du.mutation.Device(); ok {
		_spec.SetField(devices.FieldDevice, field.TypeString, value)
	}
	if du.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   devices.UserTable,
			Columns: []string{devices.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   devices.UserTable,
			Columns: []string{devices.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{devices.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DevicesUpdateOne is the builder for updating a single Devices entity.
type DevicesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DevicesMutation
}

// SetUpdateTime sets the "update_time" field.
func (duo *DevicesUpdateOne) SetUpdateTime(t time.Time) *DevicesUpdateOne {
	duo.mutation.SetUpdateTime(t)
	return duo
}

// SetIP sets the "ip" field.
func (duo *DevicesUpdateOne) SetIP(s string) *DevicesUpdateOne {
	duo.mutation.SetIP(s)
	return duo
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (duo *DevicesUpdateOne) SetNillableIP(s *string) *DevicesUpdateOne {
	if s != nil {
		duo.SetIP(*s)
	}
	return duo
}

// SetDevice sets the "device" field.
func (duo *DevicesUpdateOne) SetDevice(s string) *DevicesUpdateOne {
	duo.mutation.SetDevice(s)
	return duo
}

// SetNillableDevice sets the "device" field if the given value is not nil.
func (duo *DevicesUpdateOne) SetNillableDevice(s *string) *DevicesUpdateOne {
	if s != nil {
		duo.SetDevice(*s)
	}
	return duo
}

// SetUserID sets the "user" edge to the Users entity by ID.
func (duo *DevicesUpdateOne) SetUserID(id uint64) *DevicesUpdateOne {
	duo.mutation.SetUserID(id)
	return duo
}

// SetNillableUserID sets the "user" edge to the Users entity by ID if the given value is not nil.
func (duo *DevicesUpdateOne) SetNillableUserID(id *uint64) *DevicesUpdateOne {
	if id != nil {
		duo = duo.SetUserID(*id)
	}
	return duo
}

// SetUser sets the "user" edge to the Users entity.
func (duo *DevicesUpdateOne) SetUser(u *Users) *DevicesUpdateOne {
	return duo.SetUserID(u.ID)
}

// Mutation returns the DevicesMutation object of the builder.
func (duo *DevicesUpdateOne) Mutation() *DevicesMutation {
	return duo.mutation
}

// ClearUser clears the "user" edge to the Users entity.
func (duo *DevicesUpdateOne) ClearUser() *DevicesUpdateOne {
	duo.mutation.ClearUser()
	return duo
}

// Where appends a list predicates to the DevicesUpdate builder.
func (duo *DevicesUpdateOne) Where(ps ...predicate.Devices) *DevicesUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DevicesUpdateOne) Select(field string, fields ...string) *DevicesUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Devices entity.
func (duo *DevicesUpdateOne) Save(ctx context.Context) (*Devices, error) {
	duo.defaults()
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DevicesUpdateOne) SaveX(ctx context.Context) *Devices {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DevicesUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DevicesUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (duo *DevicesUpdateOne) defaults() {
	if _, ok := duo.mutation.UpdateTime(); !ok {
		v := devices.UpdateDefaultUpdateTime()
		duo.mutation.SetUpdateTime(v)
	}
}

func (duo *DevicesUpdateOne) sqlSave(ctx context.Context) (_node *Devices, err error) {
	_spec := sqlgraph.NewUpdateSpec(devices.Table, devices.Columns, sqlgraph.NewFieldSpec(devices.FieldID, field.TypeUint64))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Devices.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, devices.FieldID)
		for _, f := range fields {
			if !devices.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != devices.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.UpdateTime(); ok {
		_spec.SetField(devices.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := duo.mutation.IP(); ok {
		_spec.SetField(devices.FieldIP, field.TypeString, value)
	}
	if value, ok := duo.mutation.Device(); ok {
		_spec.SetField(devices.FieldDevice, field.TypeString, value)
	}
	if duo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   devices.UserTable,
			Columns: []string{devices.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   devices.UserTable,
			Columns: []string{devices.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Devices{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{devices.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
