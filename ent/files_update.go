// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/disism/saikan/ent/files"
	"github.com/disism/saikan/ent/images"
	"github.com/disism/saikan/ent/musics"
	"github.com/disism/saikan/ent/predicate"
)

// FilesUpdate is the builder for updating Files entities.
type FilesUpdate struct {
	config
	hooks    []Hook
	mutation *FilesMutation
}

// Where appends a list predicates to the FilesUpdate builder.
func (fu *FilesUpdate) Where(ps ...predicate.Files) *FilesUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetHash sets the "hash" field.
func (fu *FilesUpdate) SetHash(s string) *FilesUpdate {
	fu.mutation.SetHash(s)
	return fu
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (fu *FilesUpdate) SetNillableHash(s *string) *FilesUpdate {
	if s != nil {
		fu.SetHash(*s)
	}
	return fu
}

// SetName sets the "name" field.
func (fu *FilesUpdate) SetName(s string) *FilesUpdate {
	fu.mutation.SetName(s)
	return fu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fu *FilesUpdate) SetNillableName(s *string) *FilesUpdate {
	if s != nil {
		fu.SetName(*s)
	}
	return fu
}

// SetSize sets the "size" field.
func (fu *FilesUpdate) SetSize(u uint64) *FilesUpdate {
	fu.mutation.ResetSize()
	fu.mutation.SetSize(u)
	return fu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (fu *FilesUpdate) SetNillableSize(u *uint64) *FilesUpdate {
	if u != nil {
		fu.SetSize(*u)
	}
	return fu
}

// AddSize adds u to the "size" field.
func (fu *FilesUpdate) AddSize(u int64) *FilesUpdate {
	fu.mutation.AddSize(u)
	return fu
}

// AddMusicIDs adds the "musics" edge to the Musics entity by IDs.
func (fu *FilesUpdate) AddMusicIDs(ids ...uint64) *FilesUpdate {
	fu.mutation.AddMusicIDs(ids...)
	return fu
}

// AddMusics adds the "musics" edges to the Musics entity.
func (fu *FilesUpdate) AddMusics(m ...*Musics) *FilesUpdate {
	ids := make([]uint64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return fu.AddMusicIDs(ids...)
}

// AddImageIDs adds the "images" edge to the Images entity by IDs.
func (fu *FilesUpdate) AddImageIDs(ids ...uint64) *FilesUpdate {
	fu.mutation.AddImageIDs(ids...)
	return fu
}

// AddImages adds the "images" edges to the Images entity.
func (fu *FilesUpdate) AddImages(i ...*Images) *FilesUpdate {
	ids := make([]uint64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return fu.AddImageIDs(ids...)
}

// Mutation returns the FilesMutation object of the builder.
func (fu *FilesUpdate) Mutation() *FilesMutation {
	return fu.mutation
}

// ClearMusics clears all "musics" edges to the Musics entity.
func (fu *FilesUpdate) ClearMusics() *FilesUpdate {
	fu.mutation.ClearMusics()
	return fu
}

// RemoveMusicIDs removes the "musics" edge to Musics entities by IDs.
func (fu *FilesUpdate) RemoveMusicIDs(ids ...uint64) *FilesUpdate {
	fu.mutation.RemoveMusicIDs(ids...)
	return fu
}

// RemoveMusics removes "musics" edges to Musics entities.
func (fu *FilesUpdate) RemoveMusics(m ...*Musics) *FilesUpdate {
	ids := make([]uint64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return fu.RemoveMusicIDs(ids...)
}

// ClearImages clears all "images" edges to the Images entity.
func (fu *FilesUpdate) ClearImages() *FilesUpdate {
	fu.mutation.ClearImages()
	return fu
}

// RemoveImageIDs removes the "images" edge to Images entities by IDs.
func (fu *FilesUpdate) RemoveImageIDs(ids ...uint64) *FilesUpdate {
	fu.mutation.RemoveImageIDs(ids...)
	return fu
}

// RemoveImages removes "images" edges to Images entities.
func (fu *FilesUpdate) RemoveImages(i ...*Images) *FilesUpdate {
	ids := make([]uint64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return fu.RemoveImageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FilesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FilesUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FilesUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FilesUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FilesUpdate) check() error {
	if v, ok := fu.mutation.Name(); ok {
		if err := files.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Files.name": %w`, err)}
		}
	}
	return nil
}

func (fu *FilesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(files.Table, files.Columns, sqlgraph.NewFieldSpec(files.FieldID, field.TypeUint64))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Hash(); ok {
		_spec.SetField(files.FieldHash, field.TypeString, value)
	}
	if value, ok := fu.mutation.Name(); ok {
		_spec.SetField(files.FieldName, field.TypeString, value)
	}
	if value, ok := fu.mutation.Size(); ok {
		_spec.SetField(files.FieldSize, field.TypeUint64, value)
	}
	if value, ok := fu.mutation.AddedSize(); ok {
		_spec.AddField(files.FieldSize, field.TypeUint64, value)
	}
	if fu.mutation.MusicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   files.MusicsTable,
			Columns: []string{files.MusicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(musics.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedMusicsIDs(); len(nodes) > 0 && !fu.mutation.MusicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   files.MusicsTable,
			Columns: []string{files.MusicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(musics.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.MusicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   files.MusicsTable,
			Columns: []string{files.MusicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(musics.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   files.ImagesTable,
			Columns: []string{files.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(images.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedImagesIDs(); len(nodes) > 0 && !fu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   files.ImagesTable,
			Columns: []string{files.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(images.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   files.ImagesTable,
			Columns: []string{files.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(images.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{files.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FilesUpdateOne is the builder for updating a single Files entity.
type FilesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FilesMutation
}

// SetHash sets the "hash" field.
func (fuo *FilesUpdateOne) SetHash(s string) *FilesUpdateOne {
	fuo.mutation.SetHash(s)
	return fuo
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (fuo *FilesUpdateOne) SetNillableHash(s *string) *FilesUpdateOne {
	if s != nil {
		fuo.SetHash(*s)
	}
	return fuo
}

// SetName sets the "name" field.
func (fuo *FilesUpdateOne) SetName(s string) *FilesUpdateOne {
	fuo.mutation.SetName(s)
	return fuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fuo *FilesUpdateOne) SetNillableName(s *string) *FilesUpdateOne {
	if s != nil {
		fuo.SetName(*s)
	}
	return fuo
}

// SetSize sets the "size" field.
func (fuo *FilesUpdateOne) SetSize(u uint64) *FilesUpdateOne {
	fuo.mutation.ResetSize()
	fuo.mutation.SetSize(u)
	return fuo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (fuo *FilesUpdateOne) SetNillableSize(u *uint64) *FilesUpdateOne {
	if u != nil {
		fuo.SetSize(*u)
	}
	return fuo
}

// AddSize adds u to the "size" field.
func (fuo *FilesUpdateOne) AddSize(u int64) *FilesUpdateOne {
	fuo.mutation.AddSize(u)
	return fuo
}

// AddMusicIDs adds the "musics" edge to the Musics entity by IDs.
func (fuo *FilesUpdateOne) AddMusicIDs(ids ...uint64) *FilesUpdateOne {
	fuo.mutation.AddMusicIDs(ids...)
	return fuo
}

// AddMusics adds the "musics" edges to the Musics entity.
func (fuo *FilesUpdateOne) AddMusics(m ...*Musics) *FilesUpdateOne {
	ids := make([]uint64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return fuo.AddMusicIDs(ids...)
}

// AddImageIDs adds the "images" edge to the Images entity by IDs.
func (fuo *FilesUpdateOne) AddImageIDs(ids ...uint64) *FilesUpdateOne {
	fuo.mutation.AddImageIDs(ids...)
	return fuo
}

// AddImages adds the "images" edges to the Images entity.
func (fuo *FilesUpdateOne) AddImages(i ...*Images) *FilesUpdateOne {
	ids := make([]uint64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return fuo.AddImageIDs(ids...)
}

// Mutation returns the FilesMutation object of the builder.
func (fuo *FilesUpdateOne) Mutation() *FilesMutation {
	return fuo.mutation
}

// ClearMusics clears all "musics" edges to the Musics entity.
func (fuo *FilesUpdateOne) ClearMusics() *FilesUpdateOne {
	fuo.mutation.ClearMusics()
	return fuo
}

// RemoveMusicIDs removes the "musics" edge to Musics entities by IDs.
func (fuo *FilesUpdateOne) RemoveMusicIDs(ids ...uint64) *FilesUpdateOne {
	fuo.mutation.RemoveMusicIDs(ids...)
	return fuo
}

// RemoveMusics removes "musics" edges to Musics entities.
func (fuo *FilesUpdateOne) RemoveMusics(m ...*Musics) *FilesUpdateOne {
	ids := make([]uint64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return fuo.RemoveMusicIDs(ids...)
}

// ClearImages clears all "images" edges to the Images entity.
func (fuo *FilesUpdateOne) ClearImages() *FilesUpdateOne {
	fuo.mutation.ClearImages()
	return fuo
}

// RemoveImageIDs removes the "images" edge to Images entities by IDs.
func (fuo *FilesUpdateOne) RemoveImageIDs(ids ...uint64) *FilesUpdateOne {
	fuo.mutation.RemoveImageIDs(ids...)
	return fuo
}

// RemoveImages removes "images" edges to Images entities.
func (fuo *FilesUpdateOne) RemoveImages(i ...*Images) *FilesUpdateOne {
	ids := make([]uint64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return fuo.RemoveImageIDs(ids...)
}

// Where appends a list predicates to the FilesUpdate builder.
func (fuo *FilesUpdateOne) Where(ps ...predicate.Files) *FilesUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FilesUpdateOne) Select(field string, fields ...string) *FilesUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Files entity.
func (fuo *FilesUpdateOne) Save(ctx context.Context) (*Files, error) {
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FilesUpdateOne) SaveX(ctx context.Context) *Files {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FilesUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FilesUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FilesUpdateOne) check() error {
	if v, ok := fuo.mutation.Name(); ok {
		if err := files.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Files.name": %w`, err)}
		}
	}
	return nil
}

func (fuo *FilesUpdateOne) sqlSave(ctx context.Context) (_node *Files, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(files.Table, files.Columns, sqlgraph.NewFieldSpec(files.FieldID, field.TypeUint64))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Files.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, files.FieldID)
		for _, f := range fields {
			if !files.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != files.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Hash(); ok {
		_spec.SetField(files.FieldHash, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Name(); ok {
		_spec.SetField(files.FieldName, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Size(); ok {
		_spec.SetField(files.FieldSize, field.TypeUint64, value)
	}
	if value, ok := fuo.mutation.AddedSize(); ok {
		_spec.AddField(files.FieldSize, field.TypeUint64, value)
	}
	if fuo.mutation.MusicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   files.MusicsTable,
			Columns: []string{files.MusicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(musics.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedMusicsIDs(); len(nodes) > 0 && !fuo.mutation.MusicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   files.MusicsTable,
			Columns: []string{files.MusicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(musics.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.MusicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   files.MusicsTable,
			Columns: []string{files.MusicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(musics.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   files.ImagesTable,
			Columns: []string{files.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(images.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedImagesIDs(); len(nodes) > 0 && !fuo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   files.ImagesTable,
			Columns: []string{files.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(images.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   files.ImagesTable,
			Columns: []string{files.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(images.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Files{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{files.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
