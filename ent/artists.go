// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/disism/saikan/ent/artists"
)

// Artists is the model entity for the Artists schema.
type Artists struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ArtistsQuery when eager-loading is set.
	Edges        ArtistsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ArtistsEdges holds the relations/edges for other nodes in the graph.
type ArtistsEdges struct {
	// Musics holds the value of the musics edge.
	Musics []*Musics `json:"musics,omitempty"`
	// Albums holds the value of the albums edge.
	Albums []*Albums `json:"albums,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MusicsOrErr returns the Musics value or an error if the edge
// was not loaded in eager-loading.
func (e ArtistsEdges) MusicsOrErr() ([]*Musics, error) {
	if e.loadedTypes[0] {
		return e.Musics, nil
	}
	return nil, &NotLoadedError{edge: "musics"}
}

// AlbumsOrErr returns the Albums value or an error if the edge
// was not loaded in eager-loading.
func (e ArtistsEdges) AlbumsOrErr() ([]*Albums, error) {
	if e.loadedTypes[1] {
		return e.Albums, nil
	}
	return nil, &NotLoadedError{edge: "albums"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Artists) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case artists.FieldID:
			values[i] = new(sql.NullInt64)
		case artists.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Artists fields.
func (a *Artists) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case artists.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = uint64(value.Int64)
		case artists.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Artists.
// This includes values selected through modifiers, order, etc.
func (a *Artists) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryMusics queries the "musics" edge of the Artists entity.
func (a *Artists) QueryMusics() *MusicsQuery {
	return NewArtistsClient(a.config).QueryMusics(a)
}

// QueryAlbums queries the "albums" edge of the Artists entity.
func (a *Artists) QueryAlbums() *AlbumsQuery {
	return NewArtistsClient(a.config).QueryAlbums(a)
}

// Update returns a builder for updating this Artists.
// Note that you need to call Artists.Unwrap() before calling this method if this Artists
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Artists) Update() *ArtistsUpdateOne {
	return NewArtistsClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Artists entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Artists) Unwrap() *Artists {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Artists is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Artists) String() string {
	var builder strings.Builder
	builder.WriteString("Artists(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteByte(')')
	return builder.String()
}

// ArtistsSlice is a parsable slice of Artists.
type ArtistsSlice []*Artists
