// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/disism/saikan/ent/albums"
	"github.com/disism/saikan/ent/artists"
	"github.com/disism/saikan/ent/images"
	"github.com/disism/saikan/ent/musics"
	"github.com/disism/saikan/ent/predicate"
	"github.com/disism/saikan/ent/users"
)

// AlbumsUpdate is the builder for updating Albums entities.
type AlbumsUpdate struct {
	config
	hooks    []Hook
	mutation *AlbumsMutation
}

// Where appends a list predicates to the AlbumsUpdate builder.
func (au *AlbumsUpdate) Where(ps ...predicate.Albums) *AlbumsUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdateTime sets the "update_time" field.
func (au *AlbumsUpdate) SetUpdateTime(t time.Time) *AlbumsUpdate {
	au.mutation.SetUpdateTime(t)
	return au
}

// SetTitle sets the "title" field.
func (au *AlbumsUpdate) SetTitle(s string) *AlbumsUpdate {
	au.mutation.SetTitle(s)
	return au
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (au *AlbumsUpdate) SetNillableTitle(s *string) *AlbumsUpdate {
	if s != nil {
		au.SetTitle(*s)
	}
	return au
}

// SetDate sets the "date" field.
func (au *AlbumsUpdate) SetDate(s string) *AlbumsUpdate {
	au.mutation.SetDate(s)
	return au
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (au *AlbumsUpdate) SetNillableDate(s *string) *AlbumsUpdate {
	if s != nil {
		au.SetDate(*s)
	}
	return au
}

// SetDescription sets the "description" field.
func (au *AlbumsUpdate) SetDescription(s string) *AlbumsUpdate {
	au.mutation.SetDescription(s)
	return au
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (au *AlbumsUpdate) SetNillableDescription(s *string) *AlbumsUpdate {
	if s != nil {
		au.SetDescription(*s)
	}
	return au
}

// ClearDescription clears the value of the "description" field.
func (au *AlbumsUpdate) ClearDescription() *AlbumsUpdate {
	au.mutation.ClearDescription()
	return au
}

// SetImageID sets the "image" edge to the Images entity by ID.
func (au *AlbumsUpdate) SetImageID(id uint64) *AlbumsUpdate {
	au.mutation.SetImageID(id)
	return au
}

// SetImage sets the "image" edge to the Images entity.
func (au *AlbumsUpdate) SetImage(i *Images) *AlbumsUpdate {
	return au.SetImageID(i.ID)
}

// AddMusicIDs adds the "musics" edge to the Musics entity by IDs.
func (au *AlbumsUpdate) AddMusicIDs(ids ...uint64) *AlbumsUpdate {
	au.mutation.AddMusicIDs(ids...)
	return au
}

// AddMusics adds the "musics" edges to the Musics entity.
func (au *AlbumsUpdate) AddMusics(m ...*Musics) *AlbumsUpdate {
	ids := make([]uint64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return au.AddMusicIDs(ids...)
}

// AddUserIDs adds the "users" edge to the Users entity by IDs.
func (au *AlbumsUpdate) AddUserIDs(ids ...uint64) *AlbumsUpdate {
	au.mutation.AddUserIDs(ids...)
	return au
}

// AddUsers adds the "users" edges to the Users entity.
func (au *AlbumsUpdate) AddUsers(u ...*Users) *AlbumsUpdate {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return au.AddUserIDs(ids...)
}

// AddArtistIDs adds the "artists" edge to the Artists entity by IDs.
func (au *AlbumsUpdate) AddArtistIDs(ids ...uint64) *AlbumsUpdate {
	au.mutation.AddArtistIDs(ids...)
	return au
}

// AddArtists adds the "artists" edges to the Artists entity.
func (au *AlbumsUpdate) AddArtists(a ...*Artists) *AlbumsUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddArtistIDs(ids...)
}

// Mutation returns the AlbumsMutation object of the builder.
func (au *AlbumsUpdate) Mutation() *AlbumsMutation {
	return au.mutation
}

// ClearImage clears the "image" edge to the Images entity.
func (au *AlbumsUpdate) ClearImage() *AlbumsUpdate {
	au.mutation.ClearImage()
	return au
}

// ClearMusics clears all "musics" edges to the Musics entity.
func (au *AlbumsUpdate) ClearMusics() *AlbumsUpdate {
	au.mutation.ClearMusics()
	return au
}

// RemoveMusicIDs removes the "musics" edge to Musics entities by IDs.
func (au *AlbumsUpdate) RemoveMusicIDs(ids ...uint64) *AlbumsUpdate {
	au.mutation.RemoveMusicIDs(ids...)
	return au
}

// RemoveMusics removes "musics" edges to Musics entities.
func (au *AlbumsUpdate) RemoveMusics(m ...*Musics) *AlbumsUpdate {
	ids := make([]uint64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return au.RemoveMusicIDs(ids...)
}

// ClearUsers clears all "users" edges to the Users entity.
func (au *AlbumsUpdate) ClearUsers() *AlbumsUpdate {
	au.mutation.ClearUsers()
	return au
}

// RemoveUserIDs removes the "users" edge to Users entities by IDs.
func (au *AlbumsUpdate) RemoveUserIDs(ids ...uint64) *AlbumsUpdate {
	au.mutation.RemoveUserIDs(ids...)
	return au
}

// RemoveUsers removes "users" edges to Users entities.
func (au *AlbumsUpdate) RemoveUsers(u ...*Users) *AlbumsUpdate {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return au.RemoveUserIDs(ids...)
}

// ClearArtists clears all "artists" edges to the Artists entity.
func (au *AlbumsUpdate) ClearArtists() *AlbumsUpdate {
	au.mutation.ClearArtists()
	return au
}

// RemoveArtistIDs removes the "artists" edge to Artists entities by IDs.
func (au *AlbumsUpdate) RemoveArtistIDs(ids ...uint64) *AlbumsUpdate {
	au.mutation.RemoveArtistIDs(ids...)
	return au
}

// RemoveArtists removes "artists" edges to Artists entities.
func (au *AlbumsUpdate) RemoveArtists(a ...*Artists) *AlbumsUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveArtistIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AlbumsUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AlbumsUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AlbumsUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AlbumsUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AlbumsUpdate) defaults() {
	if _, ok := au.mutation.UpdateTime(); !ok {
		v := albums.UpdateDefaultUpdateTime()
		au.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AlbumsUpdate) check() error {
	if v, ok := au.mutation.Date(); ok {
		if err := albums.DateValidator(v); err != nil {
			return &ValidationError{Name: "date", err: fmt.Errorf(`ent: validator failed for field "Albums.date": %w`, err)}
		}
	}
	if _, ok := au.mutation.ImageID(); au.mutation.ImageCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Albums.image"`)
	}
	return nil
}

func (au *AlbumsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(albums.Table, albums.Columns, sqlgraph.NewFieldSpec(albums.FieldID, field.TypeUint64))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdateTime(); ok {
		_spec.SetField(albums.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := au.mutation.Title(); ok {
		_spec.SetField(albums.FieldTitle, field.TypeString, value)
	}
	if value, ok := au.mutation.Date(); ok {
		_spec.SetField(albums.FieldDate, field.TypeString, value)
	}
	if value, ok := au.mutation.Description(); ok {
		_spec.SetField(albums.FieldDescription, field.TypeString, value)
	}
	if au.mutation.DescriptionCleared() {
		_spec.ClearField(albums.FieldDescription, field.TypeString)
	}
	if au.mutation.ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   albums.ImageTable,
			Columns: []string{albums.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(images.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   albums.ImageTable,
			Columns: []string{albums.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(images.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.MusicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   albums.MusicsTable,
			Columns: albums.MusicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(musics.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedMusicsIDs(); len(nodes) > 0 && !au.mutation.MusicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   albums.MusicsTable,
			Columns: albums.MusicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(musics.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.MusicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   albums.MusicsTable,
			Columns: albums.MusicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(musics.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   albums.UsersTable,
			Columns: albums.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedUsersIDs(); len(nodes) > 0 && !au.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   albums.UsersTable,
			Columns: albums.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   albums.UsersTable,
			Columns: albums.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   albums.ArtistsTable,
			Columns: albums.ArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artists.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedArtistsIDs(); len(nodes) > 0 && !au.mutation.ArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   albums.ArtistsTable,
			Columns: albums.ArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artists.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ArtistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   albums.ArtistsTable,
			Columns: albums.ArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artists.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{albums.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AlbumsUpdateOne is the builder for updating a single Albums entity.
type AlbumsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AlbumsMutation
}

// SetUpdateTime sets the "update_time" field.
func (auo *AlbumsUpdateOne) SetUpdateTime(t time.Time) *AlbumsUpdateOne {
	auo.mutation.SetUpdateTime(t)
	return auo
}

// SetTitle sets the "title" field.
func (auo *AlbumsUpdateOne) SetTitle(s string) *AlbumsUpdateOne {
	auo.mutation.SetTitle(s)
	return auo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (auo *AlbumsUpdateOne) SetNillableTitle(s *string) *AlbumsUpdateOne {
	if s != nil {
		auo.SetTitle(*s)
	}
	return auo
}

// SetDate sets the "date" field.
func (auo *AlbumsUpdateOne) SetDate(s string) *AlbumsUpdateOne {
	auo.mutation.SetDate(s)
	return auo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (auo *AlbumsUpdateOne) SetNillableDate(s *string) *AlbumsUpdateOne {
	if s != nil {
		auo.SetDate(*s)
	}
	return auo
}

// SetDescription sets the "description" field.
func (auo *AlbumsUpdateOne) SetDescription(s string) *AlbumsUpdateOne {
	auo.mutation.SetDescription(s)
	return auo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (auo *AlbumsUpdateOne) SetNillableDescription(s *string) *AlbumsUpdateOne {
	if s != nil {
		auo.SetDescription(*s)
	}
	return auo
}

// ClearDescription clears the value of the "description" field.
func (auo *AlbumsUpdateOne) ClearDescription() *AlbumsUpdateOne {
	auo.mutation.ClearDescription()
	return auo
}

// SetImageID sets the "image" edge to the Images entity by ID.
func (auo *AlbumsUpdateOne) SetImageID(id uint64) *AlbumsUpdateOne {
	auo.mutation.SetImageID(id)
	return auo
}

// SetImage sets the "image" edge to the Images entity.
func (auo *AlbumsUpdateOne) SetImage(i *Images) *AlbumsUpdateOne {
	return auo.SetImageID(i.ID)
}

// AddMusicIDs adds the "musics" edge to the Musics entity by IDs.
func (auo *AlbumsUpdateOne) AddMusicIDs(ids ...uint64) *AlbumsUpdateOne {
	auo.mutation.AddMusicIDs(ids...)
	return auo
}

// AddMusics adds the "musics" edges to the Musics entity.
func (auo *AlbumsUpdateOne) AddMusics(m ...*Musics) *AlbumsUpdateOne {
	ids := make([]uint64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return auo.AddMusicIDs(ids...)
}

// AddUserIDs adds the "users" edge to the Users entity by IDs.
func (auo *AlbumsUpdateOne) AddUserIDs(ids ...uint64) *AlbumsUpdateOne {
	auo.mutation.AddUserIDs(ids...)
	return auo
}

// AddUsers adds the "users" edges to the Users entity.
func (auo *AlbumsUpdateOne) AddUsers(u ...*Users) *AlbumsUpdateOne {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return auo.AddUserIDs(ids...)
}

// AddArtistIDs adds the "artists" edge to the Artists entity by IDs.
func (auo *AlbumsUpdateOne) AddArtistIDs(ids ...uint64) *AlbumsUpdateOne {
	auo.mutation.AddArtistIDs(ids...)
	return auo
}

// AddArtists adds the "artists" edges to the Artists entity.
func (auo *AlbumsUpdateOne) AddArtists(a ...*Artists) *AlbumsUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddArtistIDs(ids...)
}

// Mutation returns the AlbumsMutation object of the builder.
func (auo *AlbumsUpdateOne) Mutation() *AlbumsMutation {
	return auo.mutation
}

// ClearImage clears the "image" edge to the Images entity.
func (auo *AlbumsUpdateOne) ClearImage() *AlbumsUpdateOne {
	auo.mutation.ClearImage()
	return auo
}

// ClearMusics clears all "musics" edges to the Musics entity.
func (auo *AlbumsUpdateOne) ClearMusics() *AlbumsUpdateOne {
	auo.mutation.ClearMusics()
	return auo
}

// RemoveMusicIDs removes the "musics" edge to Musics entities by IDs.
func (auo *AlbumsUpdateOne) RemoveMusicIDs(ids ...uint64) *AlbumsUpdateOne {
	auo.mutation.RemoveMusicIDs(ids...)
	return auo
}

// RemoveMusics removes "musics" edges to Musics entities.
func (auo *AlbumsUpdateOne) RemoveMusics(m ...*Musics) *AlbumsUpdateOne {
	ids := make([]uint64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return auo.RemoveMusicIDs(ids...)
}

// ClearUsers clears all "users" edges to the Users entity.
func (auo *AlbumsUpdateOne) ClearUsers() *AlbumsUpdateOne {
	auo.mutation.ClearUsers()
	return auo
}

// RemoveUserIDs removes the "users" edge to Users entities by IDs.
func (auo *AlbumsUpdateOne) RemoveUserIDs(ids ...uint64) *AlbumsUpdateOne {
	auo.mutation.RemoveUserIDs(ids...)
	return auo
}

// RemoveUsers removes "users" edges to Users entities.
func (auo *AlbumsUpdateOne) RemoveUsers(u ...*Users) *AlbumsUpdateOne {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return auo.RemoveUserIDs(ids...)
}

// ClearArtists clears all "artists" edges to the Artists entity.
func (auo *AlbumsUpdateOne) ClearArtists() *AlbumsUpdateOne {
	auo.mutation.ClearArtists()
	return auo
}

// RemoveArtistIDs removes the "artists" edge to Artists entities by IDs.
func (auo *AlbumsUpdateOne) RemoveArtistIDs(ids ...uint64) *AlbumsUpdateOne {
	auo.mutation.RemoveArtistIDs(ids...)
	return auo
}

// RemoveArtists removes "artists" edges to Artists entities.
func (auo *AlbumsUpdateOne) RemoveArtists(a ...*Artists) *AlbumsUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveArtistIDs(ids...)
}

// Where appends a list predicates to the AlbumsUpdate builder.
func (auo *AlbumsUpdateOne) Where(ps ...predicate.Albums) *AlbumsUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AlbumsUpdateOne) Select(field string, fields ...string) *AlbumsUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Albums entity.
func (auo *AlbumsUpdateOne) Save(ctx context.Context) (*Albums, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AlbumsUpdateOne) SaveX(ctx context.Context) *Albums {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AlbumsUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AlbumsUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AlbumsUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdateTime(); !ok {
		v := albums.UpdateDefaultUpdateTime()
		auo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AlbumsUpdateOne) check() error {
	if v, ok := auo.mutation.Date(); ok {
		if err := albums.DateValidator(v); err != nil {
			return &ValidationError{Name: "date", err: fmt.Errorf(`ent: validator failed for field "Albums.date": %w`, err)}
		}
	}
	if _, ok := auo.mutation.ImageID(); auo.mutation.ImageCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Albums.image"`)
	}
	return nil
}

func (auo *AlbumsUpdateOne) sqlSave(ctx context.Context) (_node *Albums, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(albums.Table, albums.Columns, sqlgraph.NewFieldSpec(albums.FieldID, field.TypeUint64))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Albums.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, albums.FieldID)
		for _, f := range fields {
			if !albums.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != albums.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UpdateTime(); ok {
		_spec.SetField(albums.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := auo.mutation.Title(); ok {
		_spec.SetField(albums.FieldTitle, field.TypeString, value)
	}
	if value, ok := auo.mutation.Date(); ok {
		_spec.SetField(albums.FieldDate, field.TypeString, value)
	}
	if value, ok := auo.mutation.Description(); ok {
		_spec.SetField(albums.FieldDescription, field.TypeString, value)
	}
	if auo.mutation.DescriptionCleared() {
		_spec.ClearField(albums.FieldDescription, field.TypeString)
	}
	if auo.mutation.ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   albums.ImageTable,
			Columns: []string{albums.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(images.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   albums.ImageTable,
			Columns: []string{albums.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(images.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.MusicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   albums.MusicsTable,
			Columns: albums.MusicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(musics.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedMusicsIDs(); len(nodes) > 0 && !auo.mutation.MusicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   albums.MusicsTable,
			Columns: albums.MusicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(musics.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.MusicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   albums.MusicsTable,
			Columns: albums.MusicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(musics.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   albums.UsersTable,
			Columns: albums.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !auo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   albums.UsersTable,
			Columns: albums.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   albums.UsersTable,
			Columns: albums.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   albums.ArtistsTable,
			Columns: albums.ArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artists.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedArtistsIDs(); len(nodes) > 0 && !auo.mutation.ArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   albums.ArtistsTable,
			Columns: albums.ArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artists.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ArtistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   albums.ArtistsTable,
			Columns: albums.ArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artists.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Albums{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{albums.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
