// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/disism/saikan/ent/albums"
	"github.com/disism/saikan/ent/artists"
	"github.com/disism/saikan/ent/devices"
	"github.com/disism/saikan/ent/files"
	"github.com/disism/saikan/ent/images"
	"github.com/disism/saikan/ent/musics"
	"github.com/disism/saikan/ent/oidc"
	"github.com/disism/saikan/ent/playlists"
	"github.com/disism/saikan/ent/schema"
	"github.com/disism/saikan/ent/users"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	albumsMixin := schema.Albums{}.Mixin()
	albumsMixinFields0 := albumsMixin[0].Fields()
	_ = albumsMixinFields0
	albumsFields := schema.Albums{}.Fields()
	_ = albumsFields
	// albumsDescCreateTime is the schema descriptor for create_time field.
	albumsDescCreateTime := albumsMixinFields0[0].Descriptor()
	// albums.DefaultCreateTime holds the default value on creation for the create_time field.
	albums.DefaultCreateTime = albumsDescCreateTime.Default.(func() time.Time)
	// albumsDescUpdateTime is the schema descriptor for update_time field.
	albumsDescUpdateTime := albumsMixinFields0[1].Descriptor()
	// albums.DefaultUpdateTime holds the default value on creation for the update_time field.
	albums.DefaultUpdateTime = albumsDescUpdateTime.Default.(func() time.Time)
	// albums.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	albums.UpdateDefaultUpdateTime = albumsDescUpdateTime.UpdateDefault.(func() time.Time)
	// albumsDescDate is the schema descriptor for date field.
	albumsDescDate := albumsFields[1].Descriptor()
	// albums.DateValidator is a validator for the "date" field. It is called by the builders before save.
	albums.DateValidator = albumsDescDate.Validators[0].(func(string) error)
	artistsFields := schema.Artists{}.Fields()
	_ = artistsFields
	// artistsDescName is the schema descriptor for name field.
	artistsDescName := artistsFields[1].Descriptor()
	// artists.NameValidator is a validator for the "name" field. It is called by the builders before save.
	artists.NameValidator = artistsDescName.Validators[0].(func(string) error)
	devicesMixin := schema.Devices{}.Mixin()
	devicesMixinFields1 := devicesMixin[1].Fields()
	_ = devicesMixinFields1
	devicesFields := schema.Devices{}.Fields()
	_ = devicesFields
	// devicesDescCreateTime is the schema descriptor for create_time field.
	devicesDescCreateTime := devicesMixinFields1[0].Descriptor()
	// devices.DefaultCreateTime holds the default value on creation for the create_time field.
	devices.DefaultCreateTime = devicesDescCreateTime.Default.(func() time.Time)
	// devicesDescUpdateTime is the schema descriptor for update_time field.
	devicesDescUpdateTime := devicesMixinFields1[1].Descriptor()
	// devices.DefaultUpdateTime holds the default value on creation for the update_time field.
	devices.DefaultUpdateTime = devicesDescUpdateTime.Default.(func() time.Time)
	// devices.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	devices.UpdateDefaultUpdateTime = devicesDescUpdateTime.UpdateDefault.(func() time.Time)
	filesFields := schema.Files{}.Fields()
	_ = filesFields
	// filesDescName is the schema descriptor for name field.
	filesDescName := filesFields[1].Descriptor()
	// files.NameValidator is a validator for the "name" field. It is called by the builders before save.
	files.NameValidator = filesDescName.Validators[0].(func(string) error)
	imagesMixin := schema.Images{}.Mixin()
	imagesMixinFields0 := imagesMixin[0].Fields()
	_ = imagesMixinFields0
	imagesFields := schema.Images{}.Fields()
	_ = imagesFields
	// imagesDescCreateTime is the schema descriptor for create_time field.
	imagesDescCreateTime := imagesMixinFields0[0].Descriptor()
	// images.DefaultCreateTime holds the default value on creation for the create_time field.
	images.DefaultCreateTime = imagesDescCreateTime.Default.(func() time.Time)
	// imagesDescUpdateTime is the schema descriptor for update_time field.
	imagesDescUpdateTime := imagesMixinFields0[1].Descriptor()
	// images.DefaultUpdateTime holds the default value on creation for the update_time field.
	images.DefaultUpdateTime = imagesDescUpdateTime.Default.(func() time.Time)
	// images.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	images.UpdateDefaultUpdateTime = imagesDescUpdateTime.UpdateDefault.(func() time.Time)
	musicsMixin := schema.Musics{}.Mixin()
	musicsMixinFields0 := musicsMixin[0].Fields()
	_ = musicsMixinFields0
	musicsFields := schema.Musics{}.Fields()
	_ = musicsFields
	// musicsDescCreateTime is the schema descriptor for create_time field.
	musicsDescCreateTime := musicsMixinFields0[0].Descriptor()
	// musics.DefaultCreateTime holds the default value on creation for the create_time field.
	musics.DefaultCreateTime = musicsDescCreateTime.Default.(func() time.Time)
	// musicsDescUpdateTime is the schema descriptor for update_time field.
	musicsDescUpdateTime := musicsMixinFields0[1].Descriptor()
	// musics.DefaultUpdateTime holds the default value on creation for the update_time field.
	musics.DefaultUpdateTime = musicsDescUpdateTime.Default.(func() time.Time)
	// musics.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	musics.UpdateDefaultUpdateTime = musicsDescUpdateTime.UpdateDefault.(func() time.Time)
	// musicsDescDescription is the schema descriptor for description field.
	musicsDescDescription := musicsFields[1].Descriptor()
	// musics.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	musics.DescriptionValidator = musicsDescDescription.Validators[0].(func(string) error)
	oidcMixin := schema.Oidc{}.Mixin()
	oidcMixinFields0 := oidcMixin[0].Fields()
	_ = oidcMixinFields0
	oidcFields := schema.Oidc{}.Fields()
	_ = oidcFields
	// oidcDescCreateTime is the schema descriptor for create_time field.
	oidcDescCreateTime := oidcMixinFields0[0].Descriptor()
	// oidc.DefaultCreateTime holds the default value on creation for the create_time field.
	oidc.DefaultCreateTime = oidcDescCreateTime.Default.(func() time.Time)
	// oidcDescUpdateTime is the schema descriptor for update_time field.
	oidcDescUpdateTime := oidcMixinFields0[1].Descriptor()
	// oidc.DefaultUpdateTime holds the default value on creation for the update_time field.
	oidc.DefaultUpdateTime = oidcDescUpdateTime.Default.(func() time.Time)
	// oidc.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	oidc.UpdateDefaultUpdateTime = oidcDescUpdateTime.UpdateDefault.(func() time.Time)
	playlistsMixin := schema.Playlists{}.Mixin()
	playlistsMixinFields0 := playlistsMixin[0].Fields()
	_ = playlistsMixinFields0
	playlistsFields := schema.Playlists{}.Fields()
	_ = playlistsFields
	// playlistsDescCreateTime is the schema descriptor for create_time field.
	playlistsDescCreateTime := playlistsMixinFields0[0].Descriptor()
	// playlists.DefaultCreateTime holds the default value on creation for the create_time field.
	playlists.DefaultCreateTime = playlistsDescCreateTime.Default.(func() time.Time)
	// playlistsDescUpdateTime is the schema descriptor for update_time field.
	playlistsDescUpdateTime := playlistsMixinFields0[1].Descriptor()
	// playlists.DefaultUpdateTime holds the default value on creation for the update_time field.
	playlists.DefaultUpdateTime = playlistsDescUpdateTime.Default.(func() time.Time)
	// playlists.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	playlists.UpdateDefaultUpdateTime = playlistsDescUpdateTime.UpdateDefault.(func() time.Time)
	// playlistsDescName is the schema descriptor for name field.
	playlistsDescName := playlistsFields[0].Descriptor()
	// playlists.NameValidator is a validator for the "name" field. It is called by the builders before save.
	playlists.NameValidator = playlistsDescName.Validators[0].(func(string) error)
	// playlistsDescPrivate is the schema descriptor for private field.
	playlistsDescPrivate := playlistsFields[2].Descriptor()
	// playlists.DefaultPrivate holds the default value on creation for the private field.
	playlists.DefaultPrivate = playlistsDescPrivate.Default.(bool)
	usersMixin := schema.Users{}.Mixin()
	usersMixinFields1 := usersMixin[1].Fields()
	_ = usersMixinFields1
	usersFields := schema.Users{}.Fields()
	_ = usersFields
	// usersDescCreateTime is the schema descriptor for create_time field.
	usersDescCreateTime := usersMixinFields1[0].Descriptor()
	// users.DefaultCreateTime holds the default value on creation for the create_time field.
	users.DefaultCreateTime = usersDescCreateTime.Default.(func() time.Time)
	// usersDescUpdateTime is the schema descriptor for update_time field.
	usersDescUpdateTime := usersMixinFields1[1].Descriptor()
	// users.DefaultUpdateTime holds the default value on creation for the update_time field.
	users.DefaultUpdateTime = usersDescUpdateTime.Default.(func() time.Time)
	// users.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	users.UpdateDefaultUpdateTime = usersDescUpdateTime.UpdateDefault.(func() time.Time)
	// usersDescUsername is the schema descriptor for username field.
	usersDescUsername := usersFields[0].Descriptor()
	// users.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	users.UsernameValidator = func() func(string) error {
		validators := usersDescUsername.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(username string) error {
			for _, fn := range fns {
				if err := fn(username); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}
