// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/disism/saikan/ent/albums"
	"github.com/disism/saikan/ent/artists"
	"github.com/disism/saikan/ent/devices"
	"github.com/disism/saikan/ent/files"
	"github.com/disism/saikan/ent/images"
	"github.com/disism/saikan/ent/musics"
	"github.com/disism/saikan/ent/oidc"
	"github.com/disism/saikan/ent/playlists"
	"github.com/disism/saikan/ent/predicate"
	"github.com/disism/saikan/ent/users"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeActors     = "Actors"
	TypeAlbums     = "Albums"
	TypeArtists    = "Artists"
	TypeAudiobooks = "Audiobooks"
	TypeCategorys  = "Categorys"
	TypeDevices    = "Devices"
	TypeDirectors  = "Directors"
	TypeFiles      = "Files"
	TypeImages     = "Images"
	TypeMusics     = "Musics"
	TypeOidc       = "Oidc"
	TypePlaylists  = "Playlists"
	TypeUsers      = "Users"
	TypeVideos     = "Videos"
)

// ActorsMutation represents an operation that mutates the Actors nodes in the graph.
type ActorsMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Actors, error)
	predicates    []predicate.Actors
}

var _ ent.Mutation = (*ActorsMutation)(nil)

// actorsOption allows management of the mutation configuration using functional options.
type actorsOption func(*ActorsMutation)

// newActorsMutation creates new mutation for the Actors entity.
func newActorsMutation(c config, op Op, opts ...actorsOption) *ActorsMutation {
	m := &ActorsMutation{
		config:        c,
		op:            op,
		typ:           TypeActors,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withActorsID sets the ID field of the mutation.
func withActorsID(id int) actorsOption {
	return func(m *ActorsMutation) {
		var (
			err   error
			once  sync.Once
			value *Actors
		)
		m.oldValue = func(ctx context.Context) (*Actors, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Actors.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withActors sets the old Actors of the mutation.
func withActors(node *Actors) actorsOption {
	return func(m *ActorsMutation) {
		m.oldValue = func(context.Context) (*Actors, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ActorsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ActorsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ActorsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ActorsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Actors.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the ActorsMutation builder.
func (m *ActorsMutation) Where(ps ...predicate.Actors) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ActorsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ActorsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Actors, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ActorsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ActorsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Actors).
func (m *ActorsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ActorsMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ActorsMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ActorsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown Actors field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActorsMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Actors field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ActorsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ActorsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActorsMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown Actors numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ActorsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ActorsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ActorsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Actors nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ActorsMutation) ResetField(name string) error {
	return fmt.Errorf("unknown Actors field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ActorsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ActorsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ActorsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ActorsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ActorsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ActorsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ActorsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Actors unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ActorsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Actors edge %s", name)
}

// AlbumsMutation represents an operation that mutates the Albums nodes in the graph.
type AlbumsMutation struct {
	config
	op             Op
	typ            string
	id             *uint64
	create_time    *time.Time
	update_time    *time.Time
	title          *string
	date           *string
	description    *string
	clearedFields  map[string]struct{}
	image          *uint64
	clearedimage   bool
	musics         map[uint64]struct{}
	removedmusics  map[uint64]struct{}
	clearedmusics  bool
	users          map[uint64]struct{}
	removedusers   map[uint64]struct{}
	clearedusers   bool
	artists        map[uint64]struct{}
	removedartists map[uint64]struct{}
	clearedartists bool
	done           bool
	oldValue       func(context.Context) (*Albums, error)
	predicates     []predicate.Albums
}

var _ ent.Mutation = (*AlbumsMutation)(nil)

// albumsOption allows management of the mutation configuration using functional options.
type albumsOption func(*AlbumsMutation)

// newAlbumsMutation creates new mutation for the Albums entity.
func newAlbumsMutation(c config, op Op, opts ...albumsOption) *AlbumsMutation {
	m := &AlbumsMutation{
		config:        c,
		op:            op,
		typ:           TypeAlbums,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAlbumsID sets the ID field of the mutation.
func withAlbumsID(id uint64) albumsOption {
	return func(m *AlbumsMutation) {
		var (
			err   error
			once  sync.Once
			value *Albums
		)
		m.oldValue = func(ctx context.Context) (*Albums, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Albums.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAlbums sets the old Albums of the mutation.
func withAlbums(node *Albums) albumsOption {
	return func(m *AlbumsMutation) {
		m.oldValue = func(context.Context) (*Albums, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AlbumsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AlbumsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Albums entities.
func (m *AlbumsMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AlbumsMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AlbumsMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Albums.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *AlbumsMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *AlbumsMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Albums entity.
// If the Albums object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlbumsMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *AlbumsMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *AlbumsMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *AlbumsMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Albums entity.
// If the Albums object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlbumsMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *AlbumsMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetTitle sets the "title" field.
func (m *AlbumsMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *AlbumsMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Albums entity.
// If the Albums object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlbumsMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *AlbumsMutation) ResetTitle() {
	m.title = nil
}

// SetDate sets the "date" field.
func (m *AlbumsMutation) SetDate(s string) {
	m.date = &s
}

// Date returns the value of the "date" field in the mutation.
func (m *AlbumsMutation) Date() (r string, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "date" field's value of the Albums entity.
// If the Albums object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlbumsMutation) OldDate(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ResetDate resets all changes to the "date" field.
func (m *AlbumsMutation) ResetDate() {
	m.date = nil
}

// SetDescription sets the "description" field.
func (m *AlbumsMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *AlbumsMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Albums entity.
// If the Albums object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlbumsMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *AlbumsMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[albums.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *AlbumsMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[albums.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *AlbumsMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, albums.FieldDescription)
}

// SetImageID sets the "image" edge to the Images entity by id.
func (m *AlbumsMutation) SetImageID(id uint64) {
	m.image = &id
}

// ClearImage clears the "image" edge to the Images entity.
func (m *AlbumsMutation) ClearImage() {
	m.clearedimage = true
}

// ImageCleared reports if the "image" edge to the Images entity was cleared.
func (m *AlbumsMutation) ImageCleared() bool {
	return m.clearedimage
}

// ImageID returns the "image" edge ID in the mutation.
func (m *AlbumsMutation) ImageID() (id uint64, exists bool) {
	if m.image != nil {
		return *m.image, true
	}
	return
}

// ImageIDs returns the "image" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ImageID instead. It exists only for internal usage by the builders.
func (m *AlbumsMutation) ImageIDs() (ids []uint64) {
	if id := m.image; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetImage resets all changes to the "image" edge.
func (m *AlbumsMutation) ResetImage() {
	m.image = nil
	m.clearedimage = false
}

// AddMusicIDs adds the "musics" edge to the Musics entity by ids.
func (m *AlbumsMutation) AddMusicIDs(ids ...uint64) {
	if m.musics == nil {
		m.musics = make(map[uint64]struct{})
	}
	for i := range ids {
		m.musics[ids[i]] = struct{}{}
	}
}

// ClearMusics clears the "musics" edge to the Musics entity.
func (m *AlbumsMutation) ClearMusics() {
	m.clearedmusics = true
}

// MusicsCleared reports if the "musics" edge to the Musics entity was cleared.
func (m *AlbumsMutation) MusicsCleared() bool {
	return m.clearedmusics
}

// RemoveMusicIDs removes the "musics" edge to the Musics entity by IDs.
func (m *AlbumsMutation) RemoveMusicIDs(ids ...uint64) {
	if m.removedmusics == nil {
		m.removedmusics = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.musics, ids[i])
		m.removedmusics[ids[i]] = struct{}{}
	}
}

// RemovedMusics returns the removed IDs of the "musics" edge to the Musics entity.
func (m *AlbumsMutation) RemovedMusicsIDs() (ids []uint64) {
	for id := range m.removedmusics {
		ids = append(ids, id)
	}
	return
}

// MusicsIDs returns the "musics" edge IDs in the mutation.
func (m *AlbumsMutation) MusicsIDs() (ids []uint64) {
	for id := range m.musics {
		ids = append(ids, id)
	}
	return
}

// ResetMusics resets all changes to the "musics" edge.
func (m *AlbumsMutation) ResetMusics() {
	m.musics = nil
	m.clearedmusics = false
	m.removedmusics = nil
}

// AddUserIDs adds the "users" edge to the Users entity by ids.
func (m *AlbumsMutation) AddUserIDs(ids ...uint64) {
	if m.users == nil {
		m.users = make(map[uint64]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the Users entity.
func (m *AlbumsMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the Users entity was cleared.
func (m *AlbumsMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the Users entity by IDs.
func (m *AlbumsMutation) RemoveUserIDs(ids ...uint64) {
	if m.removedusers == nil {
		m.removedusers = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.users, ids[i])
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the Users entity.
func (m *AlbumsMutation) RemovedUsersIDs() (ids []uint64) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *AlbumsMutation) UsersIDs() (ids []uint64) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *AlbumsMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// AddArtistIDs adds the "artists" edge to the Artists entity by ids.
func (m *AlbumsMutation) AddArtistIDs(ids ...uint64) {
	if m.artists == nil {
		m.artists = make(map[uint64]struct{})
	}
	for i := range ids {
		m.artists[ids[i]] = struct{}{}
	}
}

// ClearArtists clears the "artists" edge to the Artists entity.
func (m *AlbumsMutation) ClearArtists() {
	m.clearedartists = true
}

// ArtistsCleared reports if the "artists" edge to the Artists entity was cleared.
func (m *AlbumsMutation) ArtistsCleared() bool {
	return m.clearedartists
}

// RemoveArtistIDs removes the "artists" edge to the Artists entity by IDs.
func (m *AlbumsMutation) RemoveArtistIDs(ids ...uint64) {
	if m.removedartists == nil {
		m.removedartists = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.artists, ids[i])
		m.removedartists[ids[i]] = struct{}{}
	}
}

// RemovedArtists returns the removed IDs of the "artists" edge to the Artists entity.
func (m *AlbumsMutation) RemovedArtistsIDs() (ids []uint64) {
	for id := range m.removedartists {
		ids = append(ids, id)
	}
	return
}

// ArtistsIDs returns the "artists" edge IDs in the mutation.
func (m *AlbumsMutation) ArtistsIDs() (ids []uint64) {
	for id := range m.artists {
		ids = append(ids, id)
	}
	return
}

// ResetArtists resets all changes to the "artists" edge.
func (m *AlbumsMutation) ResetArtists() {
	m.artists = nil
	m.clearedartists = false
	m.removedartists = nil
}

// Where appends a list predicates to the AlbumsMutation builder.
func (m *AlbumsMutation) Where(ps ...predicate.Albums) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AlbumsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AlbumsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Albums, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AlbumsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AlbumsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Albums).
func (m *AlbumsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AlbumsMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.create_time != nil {
		fields = append(fields, albums.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, albums.FieldUpdateTime)
	}
	if m.title != nil {
		fields = append(fields, albums.FieldTitle)
	}
	if m.date != nil {
		fields = append(fields, albums.FieldDate)
	}
	if m.description != nil {
		fields = append(fields, albums.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AlbumsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case albums.FieldCreateTime:
		return m.CreateTime()
	case albums.FieldUpdateTime:
		return m.UpdateTime()
	case albums.FieldTitle:
		return m.Title()
	case albums.FieldDate:
		return m.Date()
	case albums.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AlbumsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case albums.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case albums.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case albums.FieldTitle:
		return m.OldTitle(ctx)
	case albums.FieldDate:
		return m.OldDate(ctx)
	case albums.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Albums field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AlbumsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case albums.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case albums.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case albums.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case albums.FieldDate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	case albums.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Albums field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AlbumsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AlbumsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AlbumsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Albums numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AlbumsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(albums.FieldDescription) {
		fields = append(fields, albums.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AlbumsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AlbumsMutation) ClearField(name string) error {
	switch name {
	case albums.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Albums nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AlbumsMutation) ResetField(name string) error {
	switch name {
	case albums.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case albums.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case albums.FieldTitle:
		m.ResetTitle()
		return nil
	case albums.FieldDate:
		m.ResetDate()
		return nil
	case albums.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Albums field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AlbumsMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.image != nil {
		edges = append(edges, albums.EdgeImage)
	}
	if m.musics != nil {
		edges = append(edges, albums.EdgeMusics)
	}
	if m.users != nil {
		edges = append(edges, albums.EdgeUsers)
	}
	if m.artists != nil {
		edges = append(edges, albums.EdgeArtists)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AlbumsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case albums.EdgeImage:
		if id := m.image; id != nil {
			return []ent.Value{*id}
		}
	case albums.EdgeMusics:
		ids := make([]ent.Value, 0, len(m.musics))
		for id := range m.musics {
			ids = append(ids, id)
		}
		return ids
	case albums.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	case albums.EdgeArtists:
		ids := make([]ent.Value, 0, len(m.artists))
		for id := range m.artists {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AlbumsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedmusics != nil {
		edges = append(edges, albums.EdgeMusics)
	}
	if m.removedusers != nil {
		edges = append(edges, albums.EdgeUsers)
	}
	if m.removedartists != nil {
		edges = append(edges, albums.EdgeArtists)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AlbumsMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case albums.EdgeMusics:
		ids := make([]ent.Value, 0, len(m.removedmusics))
		for id := range m.removedmusics {
			ids = append(ids, id)
		}
		return ids
	case albums.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	case albums.EdgeArtists:
		ids := make([]ent.Value, 0, len(m.removedartists))
		for id := range m.removedartists {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AlbumsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedimage {
		edges = append(edges, albums.EdgeImage)
	}
	if m.clearedmusics {
		edges = append(edges, albums.EdgeMusics)
	}
	if m.clearedusers {
		edges = append(edges, albums.EdgeUsers)
	}
	if m.clearedartists {
		edges = append(edges, albums.EdgeArtists)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AlbumsMutation) EdgeCleared(name string) bool {
	switch name {
	case albums.EdgeImage:
		return m.clearedimage
	case albums.EdgeMusics:
		return m.clearedmusics
	case albums.EdgeUsers:
		return m.clearedusers
	case albums.EdgeArtists:
		return m.clearedartists
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AlbumsMutation) ClearEdge(name string) error {
	switch name {
	case albums.EdgeImage:
		m.ClearImage()
		return nil
	}
	return fmt.Errorf("unknown Albums unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AlbumsMutation) ResetEdge(name string) error {
	switch name {
	case albums.EdgeImage:
		m.ResetImage()
		return nil
	case albums.EdgeMusics:
		m.ResetMusics()
		return nil
	case albums.EdgeUsers:
		m.ResetUsers()
		return nil
	case albums.EdgeArtists:
		m.ResetArtists()
		return nil
	}
	return fmt.Errorf("unknown Albums edge %s", name)
}

// ArtistsMutation represents an operation that mutates the Artists nodes in the graph.
type ArtistsMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	name          *string
	clearedFields map[string]struct{}
	musics        map[uint64]struct{}
	removedmusics map[uint64]struct{}
	clearedmusics bool
	albums        map[uint64]struct{}
	removedalbums map[uint64]struct{}
	clearedalbums bool
	done          bool
	oldValue      func(context.Context) (*Artists, error)
	predicates    []predicate.Artists
}

var _ ent.Mutation = (*ArtistsMutation)(nil)

// artistsOption allows management of the mutation configuration using functional options.
type artistsOption func(*ArtistsMutation)

// newArtistsMutation creates new mutation for the Artists entity.
func newArtistsMutation(c config, op Op, opts ...artistsOption) *ArtistsMutation {
	m := &ArtistsMutation{
		config:        c,
		op:            op,
		typ:           TypeArtists,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withArtistsID sets the ID field of the mutation.
func withArtistsID(id uint64) artistsOption {
	return func(m *ArtistsMutation) {
		var (
			err   error
			once  sync.Once
			value *Artists
		)
		m.oldValue = func(ctx context.Context) (*Artists, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Artists.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withArtists sets the old Artists of the mutation.
func withArtists(node *Artists) artistsOption {
	return func(m *ArtistsMutation) {
		m.oldValue = func(context.Context) (*Artists, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ArtistsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ArtistsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Artists entities.
func (m *ArtistsMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ArtistsMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ArtistsMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Artists.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ArtistsMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ArtistsMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Artists entity.
// If the Artists object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArtistsMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ArtistsMutation) ResetName() {
	m.name = nil
}

// AddMusicIDs adds the "musics" edge to the Musics entity by ids.
func (m *ArtistsMutation) AddMusicIDs(ids ...uint64) {
	if m.musics == nil {
		m.musics = make(map[uint64]struct{})
	}
	for i := range ids {
		m.musics[ids[i]] = struct{}{}
	}
}

// ClearMusics clears the "musics" edge to the Musics entity.
func (m *ArtistsMutation) ClearMusics() {
	m.clearedmusics = true
}

// MusicsCleared reports if the "musics" edge to the Musics entity was cleared.
func (m *ArtistsMutation) MusicsCleared() bool {
	return m.clearedmusics
}

// RemoveMusicIDs removes the "musics" edge to the Musics entity by IDs.
func (m *ArtistsMutation) RemoveMusicIDs(ids ...uint64) {
	if m.removedmusics == nil {
		m.removedmusics = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.musics, ids[i])
		m.removedmusics[ids[i]] = struct{}{}
	}
}

// RemovedMusics returns the removed IDs of the "musics" edge to the Musics entity.
func (m *ArtistsMutation) RemovedMusicsIDs() (ids []uint64) {
	for id := range m.removedmusics {
		ids = append(ids, id)
	}
	return
}

// MusicsIDs returns the "musics" edge IDs in the mutation.
func (m *ArtistsMutation) MusicsIDs() (ids []uint64) {
	for id := range m.musics {
		ids = append(ids, id)
	}
	return
}

// ResetMusics resets all changes to the "musics" edge.
func (m *ArtistsMutation) ResetMusics() {
	m.musics = nil
	m.clearedmusics = false
	m.removedmusics = nil
}

// AddAlbumIDs adds the "albums" edge to the Albums entity by ids.
func (m *ArtistsMutation) AddAlbumIDs(ids ...uint64) {
	if m.albums == nil {
		m.albums = make(map[uint64]struct{})
	}
	for i := range ids {
		m.albums[ids[i]] = struct{}{}
	}
}

// ClearAlbums clears the "albums" edge to the Albums entity.
func (m *ArtistsMutation) ClearAlbums() {
	m.clearedalbums = true
}

// AlbumsCleared reports if the "albums" edge to the Albums entity was cleared.
func (m *ArtistsMutation) AlbumsCleared() bool {
	return m.clearedalbums
}

// RemoveAlbumIDs removes the "albums" edge to the Albums entity by IDs.
func (m *ArtistsMutation) RemoveAlbumIDs(ids ...uint64) {
	if m.removedalbums == nil {
		m.removedalbums = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.albums, ids[i])
		m.removedalbums[ids[i]] = struct{}{}
	}
}

// RemovedAlbums returns the removed IDs of the "albums" edge to the Albums entity.
func (m *ArtistsMutation) RemovedAlbumsIDs() (ids []uint64) {
	for id := range m.removedalbums {
		ids = append(ids, id)
	}
	return
}

// AlbumsIDs returns the "albums" edge IDs in the mutation.
func (m *ArtistsMutation) AlbumsIDs() (ids []uint64) {
	for id := range m.albums {
		ids = append(ids, id)
	}
	return
}

// ResetAlbums resets all changes to the "albums" edge.
func (m *ArtistsMutation) ResetAlbums() {
	m.albums = nil
	m.clearedalbums = false
	m.removedalbums = nil
}

// Where appends a list predicates to the ArtistsMutation builder.
func (m *ArtistsMutation) Where(ps ...predicate.Artists) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ArtistsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ArtistsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Artists, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ArtistsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ArtistsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Artists).
func (m *ArtistsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ArtistsMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, artists.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ArtistsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case artists.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ArtistsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case artists.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Artists field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArtistsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case artists.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Artists field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ArtistsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ArtistsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArtistsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Artists numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ArtistsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ArtistsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ArtistsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Artists nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ArtistsMutation) ResetField(name string) error {
	switch name {
	case artists.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Artists field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ArtistsMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.musics != nil {
		edges = append(edges, artists.EdgeMusics)
	}
	if m.albums != nil {
		edges = append(edges, artists.EdgeAlbums)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ArtistsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case artists.EdgeMusics:
		ids := make([]ent.Value, 0, len(m.musics))
		for id := range m.musics {
			ids = append(ids, id)
		}
		return ids
	case artists.EdgeAlbums:
		ids := make([]ent.Value, 0, len(m.albums))
		for id := range m.albums {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ArtistsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedmusics != nil {
		edges = append(edges, artists.EdgeMusics)
	}
	if m.removedalbums != nil {
		edges = append(edges, artists.EdgeAlbums)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ArtistsMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case artists.EdgeMusics:
		ids := make([]ent.Value, 0, len(m.removedmusics))
		for id := range m.removedmusics {
			ids = append(ids, id)
		}
		return ids
	case artists.EdgeAlbums:
		ids := make([]ent.Value, 0, len(m.removedalbums))
		for id := range m.removedalbums {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ArtistsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedmusics {
		edges = append(edges, artists.EdgeMusics)
	}
	if m.clearedalbums {
		edges = append(edges, artists.EdgeAlbums)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ArtistsMutation) EdgeCleared(name string) bool {
	switch name {
	case artists.EdgeMusics:
		return m.clearedmusics
	case artists.EdgeAlbums:
		return m.clearedalbums
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ArtistsMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Artists unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ArtistsMutation) ResetEdge(name string) error {
	switch name {
	case artists.EdgeMusics:
		m.ResetMusics()
		return nil
	case artists.EdgeAlbums:
		m.ResetAlbums()
		return nil
	}
	return fmt.Errorf("unknown Artists edge %s", name)
}

// AudiobooksMutation represents an operation that mutates the Audiobooks nodes in the graph.
type AudiobooksMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Audiobooks, error)
	predicates    []predicate.Audiobooks
}

var _ ent.Mutation = (*AudiobooksMutation)(nil)

// audiobooksOption allows management of the mutation configuration using functional options.
type audiobooksOption func(*AudiobooksMutation)

// newAudiobooksMutation creates new mutation for the Audiobooks entity.
func newAudiobooksMutation(c config, op Op, opts ...audiobooksOption) *AudiobooksMutation {
	m := &AudiobooksMutation{
		config:        c,
		op:            op,
		typ:           TypeAudiobooks,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAudiobooksID sets the ID field of the mutation.
func withAudiobooksID(id int) audiobooksOption {
	return func(m *AudiobooksMutation) {
		var (
			err   error
			once  sync.Once
			value *Audiobooks
		)
		m.oldValue = func(ctx context.Context) (*Audiobooks, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Audiobooks.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAudiobooks sets the old Audiobooks of the mutation.
func withAudiobooks(node *Audiobooks) audiobooksOption {
	return func(m *AudiobooksMutation) {
		m.oldValue = func(context.Context) (*Audiobooks, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AudiobooksMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AudiobooksMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AudiobooksMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AudiobooksMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Audiobooks.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the AudiobooksMutation builder.
func (m *AudiobooksMutation) Where(ps ...predicate.Audiobooks) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AudiobooksMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AudiobooksMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Audiobooks, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AudiobooksMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AudiobooksMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Audiobooks).
func (m *AudiobooksMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AudiobooksMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AudiobooksMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AudiobooksMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown Audiobooks field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AudiobooksMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Audiobooks field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AudiobooksMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AudiobooksMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AudiobooksMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown Audiobooks numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AudiobooksMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AudiobooksMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AudiobooksMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Audiobooks nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AudiobooksMutation) ResetField(name string) error {
	return fmt.Errorf("unknown Audiobooks field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AudiobooksMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AudiobooksMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AudiobooksMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AudiobooksMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AudiobooksMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AudiobooksMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AudiobooksMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Audiobooks unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AudiobooksMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Audiobooks edge %s", name)
}

// CategorysMutation represents an operation that mutates the Categorys nodes in the graph.
type CategorysMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Categorys, error)
	predicates    []predicate.Categorys
}

var _ ent.Mutation = (*CategorysMutation)(nil)

// categorysOption allows management of the mutation configuration using functional options.
type categorysOption func(*CategorysMutation)

// newCategorysMutation creates new mutation for the Categorys entity.
func newCategorysMutation(c config, op Op, opts ...categorysOption) *CategorysMutation {
	m := &CategorysMutation{
		config:        c,
		op:            op,
		typ:           TypeCategorys,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCategorysID sets the ID field of the mutation.
func withCategorysID(id int) categorysOption {
	return func(m *CategorysMutation) {
		var (
			err   error
			once  sync.Once
			value *Categorys
		)
		m.oldValue = func(ctx context.Context) (*Categorys, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Categorys.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCategorys sets the old Categorys of the mutation.
func withCategorys(node *Categorys) categorysOption {
	return func(m *CategorysMutation) {
		m.oldValue = func(context.Context) (*Categorys, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CategorysMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CategorysMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CategorysMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CategorysMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Categorys.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the CategorysMutation builder.
func (m *CategorysMutation) Where(ps ...predicate.Categorys) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CategorysMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CategorysMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Categorys, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CategorysMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CategorysMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Categorys).
func (m *CategorysMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CategorysMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CategorysMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CategorysMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown Categorys field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategorysMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Categorys field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CategorysMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CategorysMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategorysMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown Categorys numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CategorysMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CategorysMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CategorysMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Categorys nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CategorysMutation) ResetField(name string) error {
	return fmt.Errorf("unknown Categorys field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CategorysMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CategorysMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CategorysMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CategorysMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CategorysMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CategorysMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CategorysMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Categorys unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CategorysMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Categorys edge %s", name)
}

// DevicesMutation represents an operation that mutates the Devices nodes in the graph.
type DevicesMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	create_time   *time.Time
	update_time   *time.Time
	ip            *string
	device        *string
	clearedFields map[string]struct{}
	user          *uint64
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*Devices, error)
	predicates    []predicate.Devices
}

var _ ent.Mutation = (*DevicesMutation)(nil)

// devicesOption allows management of the mutation configuration using functional options.
type devicesOption func(*DevicesMutation)

// newDevicesMutation creates new mutation for the Devices entity.
func newDevicesMutation(c config, op Op, opts ...devicesOption) *DevicesMutation {
	m := &DevicesMutation{
		config:        c,
		op:            op,
		typ:           TypeDevices,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDevicesID sets the ID field of the mutation.
func withDevicesID(id uint64) devicesOption {
	return func(m *DevicesMutation) {
		var (
			err   error
			once  sync.Once
			value *Devices
		)
		m.oldValue = func(ctx context.Context) (*Devices, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Devices.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDevices sets the old Devices of the mutation.
func withDevices(node *Devices) devicesOption {
	return func(m *DevicesMutation) {
		m.oldValue = func(context.Context) (*Devices, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DevicesMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DevicesMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Devices entities.
func (m *DevicesMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DevicesMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DevicesMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Devices.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *DevicesMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *DevicesMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Devices entity.
// If the Devices object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DevicesMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *DevicesMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *DevicesMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *DevicesMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Devices entity.
// If the Devices object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DevicesMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *DevicesMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetIP sets the "ip" field.
func (m *DevicesMutation) SetIP(s string) {
	m.ip = &s
}

// IP returns the value of the "ip" field in the mutation.
func (m *DevicesMutation) IP() (r string, exists bool) {
	v := m.ip
	if v == nil {
		return
	}
	return *v, true
}

// OldIP returns the old "ip" field's value of the Devices entity.
// If the Devices object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DevicesMutation) OldIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIP: %w", err)
	}
	return oldValue.IP, nil
}

// ResetIP resets all changes to the "ip" field.
func (m *DevicesMutation) ResetIP() {
	m.ip = nil
}

// SetDevice sets the "device" field.
func (m *DevicesMutation) SetDevice(s string) {
	m.device = &s
}

// Device returns the value of the "device" field in the mutation.
func (m *DevicesMutation) Device() (r string, exists bool) {
	v := m.device
	if v == nil {
		return
	}
	return *v, true
}

// OldDevice returns the old "device" field's value of the Devices entity.
// If the Devices object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DevicesMutation) OldDevice(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDevice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDevice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDevice: %w", err)
	}
	return oldValue.Device, nil
}

// ResetDevice resets all changes to the "device" field.
func (m *DevicesMutation) ResetDevice() {
	m.device = nil
}

// SetUserID sets the "user" edge to the Users entity by id.
func (m *DevicesMutation) SetUserID(id uint64) {
	m.user = &id
}

// ClearUser clears the "user" edge to the Users entity.
func (m *DevicesMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the Users entity was cleared.
func (m *DevicesMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *DevicesMutation) UserID() (id uint64, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *DevicesMutation) UserIDs() (ids []uint64) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *DevicesMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the DevicesMutation builder.
func (m *DevicesMutation) Where(ps ...predicate.Devices) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DevicesMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DevicesMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Devices, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DevicesMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DevicesMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Devices).
func (m *DevicesMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DevicesMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.create_time != nil {
		fields = append(fields, devices.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, devices.FieldUpdateTime)
	}
	if m.ip != nil {
		fields = append(fields, devices.FieldIP)
	}
	if m.device != nil {
		fields = append(fields, devices.FieldDevice)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DevicesMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case devices.FieldCreateTime:
		return m.CreateTime()
	case devices.FieldUpdateTime:
		return m.UpdateTime()
	case devices.FieldIP:
		return m.IP()
	case devices.FieldDevice:
		return m.Device()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DevicesMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case devices.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case devices.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case devices.FieldIP:
		return m.OldIP(ctx)
	case devices.FieldDevice:
		return m.OldDevice(ctx)
	}
	return nil, fmt.Errorf("unknown Devices field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DevicesMutation) SetField(name string, value ent.Value) error {
	switch name {
	case devices.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case devices.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case devices.FieldIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIP(v)
		return nil
	case devices.FieldDevice:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDevice(v)
		return nil
	}
	return fmt.Errorf("unknown Devices field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DevicesMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DevicesMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DevicesMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Devices numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DevicesMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DevicesMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DevicesMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Devices nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DevicesMutation) ResetField(name string) error {
	switch name {
	case devices.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case devices.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case devices.FieldIP:
		m.ResetIP()
		return nil
	case devices.FieldDevice:
		m.ResetDevice()
		return nil
	}
	return fmt.Errorf("unknown Devices field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DevicesMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, devices.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DevicesMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case devices.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DevicesMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DevicesMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DevicesMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, devices.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DevicesMutation) EdgeCleared(name string) bool {
	switch name {
	case devices.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DevicesMutation) ClearEdge(name string) error {
	switch name {
	case devices.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Devices unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DevicesMutation) ResetEdge(name string) error {
	switch name {
	case devices.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Devices edge %s", name)
}

// DirectorsMutation represents an operation that mutates the Directors nodes in the graph.
type DirectorsMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Directors, error)
	predicates    []predicate.Directors
}

var _ ent.Mutation = (*DirectorsMutation)(nil)

// directorsOption allows management of the mutation configuration using functional options.
type directorsOption func(*DirectorsMutation)

// newDirectorsMutation creates new mutation for the Directors entity.
func newDirectorsMutation(c config, op Op, opts ...directorsOption) *DirectorsMutation {
	m := &DirectorsMutation{
		config:        c,
		op:            op,
		typ:           TypeDirectors,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDirectorsID sets the ID field of the mutation.
func withDirectorsID(id int) directorsOption {
	return func(m *DirectorsMutation) {
		var (
			err   error
			once  sync.Once
			value *Directors
		)
		m.oldValue = func(ctx context.Context) (*Directors, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Directors.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDirectors sets the old Directors of the mutation.
func withDirectors(node *Directors) directorsOption {
	return func(m *DirectorsMutation) {
		m.oldValue = func(context.Context) (*Directors, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DirectorsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DirectorsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DirectorsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DirectorsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Directors.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the DirectorsMutation builder.
func (m *DirectorsMutation) Where(ps ...predicate.Directors) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DirectorsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DirectorsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Directors, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DirectorsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DirectorsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Directors).
func (m *DirectorsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DirectorsMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DirectorsMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DirectorsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown Directors field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DirectorsMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Directors field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DirectorsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DirectorsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DirectorsMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown Directors numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DirectorsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DirectorsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DirectorsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Directors nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DirectorsMutation) ResetField(name string) error {
	return fmt.Errorf("unknown Directors field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DirectorsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DirectorsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DirectorsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DirectorsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DirectorsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DirectorsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DirectorsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Directors unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DirectorsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Directors edge %s", name)
}

// FilesMutation represents an operation that mutates the Files nodes in the graph.
type FilesMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	hash          *string
	name          *string
	size          *uint64
	addsize       *int64
	clearedFields map[string]struct{}
	musics        map[uint64]struct{}
	removedmusics map[uint64]struct{}
	clearedmusics bool
	images        map[uint64]struct{}
	removedimages map[uint64]struct{}
	clearedimages bool
	done          bool
	oldValue      func(context.Context) (*Files, error)
	predicates    []predicate.Files
}

var _ ent.Mutation = (*FilesMutation)(nil)

// filesOption allows management of the mutation configuration using functional options.
type filesOption func(*FilesMutation)

// newFilesMutation creates new mutation for the Files entity.
func newFilesMutation(c config, op Op, opts ...filesOption) *FilesMutation {
	m := &FilesMutation{
		config:        c,
		op:            op,
		typ:           TypeFiles,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFilesID sets the ID field of the mutation.
func withFilesID(id uint64) filesOption {
	return func(m *FilesMutation) {
		var (
			err   error
			once  sync.Once
			value *Files
		)
		m.oldValue = func(ctx context.Context) (*Files, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Files.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFiles sets the old Files of the mutation.
func withFiles(node *Files) filesOption {
	return func(m *FilesMutation) {
		m.oldValue = func(context.Context) (*Files, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FilesMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FilesMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Files entities.
func (m *FilesMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FilesMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FilesMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Files.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetHash sets the "hash" field.
func (m *FilesMutation) SetHash(s string) {
	m.hash = &s
}

// Hash returns the value of the "hash" field in the mutation.
func (m *FilesMutation) Hash() (r string, exists bool) {
	v := m.hash
	if v == nil {
		return
	}
	return *v, true
}

// OldHash returns the old "hash" field's value of the Files entity.
// If the Files object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FilesMutation) OldHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHash: %w", err)
	}
	return oldValue.Hash, nil
}

// ResetHash resets all changes to the "hash" field.
func (m *FilesMutation) ResetHash() {
	m.hash = nil
}

// SetName sets the "name" field.
func (m *FilesMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *FilesMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Files entity.
// If the Files object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FilesMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *FilesMutation) ResetName() {
	m.name = nil
}

// SetSize sets the "size" field.
func (m *FilesMutation) SetSize(u uint64) {
	m.size = &u
	m.addsize = nil
}

// Size returns the value of the "size" field in the mutation.
func (m *FilesMutation) Size() (r uint64, exists bool) {
	v := m.size
	if v == nil {
		return
	}
	return *v, true
}

// OldSize returns the old "size" field's value of the Files entity.
// If the Files object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FilesMutation) OldSize(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSize: %w", err)
	}
	return oldValue.Size, nil
}

// AddSize adds u to the "size" field.
func (m *FilesMutation) AddSize(u int64) {
	if m.addsize != nil {
		*m.addsize += u
	} else {
		m.addsize = &u
	}
}

// AddedSize returns the value that was added to the "size" field in this mutation.
func (m *FilesMutation) AddedSize() (r int64, exists bool) {
	v := m.addsize
	if v == nil {
		return
	}
	return *v, true
}

// ResetSize resets all changes to the "size" field.
func (m *FilesMutation) ResetSize() {
	m.size = nil
	m.addsize = nil
}

// AddMusicIDs adds the "musics" edge to the Musics entity by ids.
func (m *FilesMutation) AddMusicIDs(ids ...uint64) {
	if m.musics == nil {
		m.musics = make(map[uint64]struct{})
	}
	for i := range ids {
		m.musics[ids[i]] = struct{}{}
	}
}

// ClearMusics clears the "musics" edge to the Musics entity.
func (m *FilesMutation) ClearMusics() {
	m.clearedmusics = true
}

// MusicsCleared reports if the "musics" edge to the Musics entity was cleared.
func (m *FilesMutation) MusicsCleared() bool {
	return m.clearedmusics
}

// RemoveMusicIDs removes the "musics" edge to the Musics entity by IDs.
func (m *FilesMutation) RemoveMusicIDs(ids ...uint64) {
	if m.removedmusics == nil {
		m.removedmusics = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.musics, ids[i])
		m.removedmusics[ids[i]] = struct{}{}
	}
}

// RemovedMusics returns the removed IDs of the "musics" edge to the Musics entity.
func (m *FilesMutation) RemovedMusicsIDs() (ids []uint64) {
	for id := range m.removedmusics {
		ids = append(ids, id)
	}
	return
}

// MusicsIDs returns the "musics" edge IDs in the mutation.
func (m *FilesMutation) MusicsIDs() (ids []uint64) {
	for id := range m.musics {
		ids = append(ids, id)
	}
	return
}

// ResetMusics resets all changes to the "musics" edge.
func (m *FilesMutation) ResetMusics() {
	m.musics = nil
	m.clearedmusics = false
	m.removedmusics = nil
}

// AddImageIDs adds the "images" edge to the Images entity by ids.
func (m *FilesMutation) AddImageIDs(ids ...uint64) {
	if m.images == nil {
		m.images = make(map[uint64]struct{})
	}
	for i := range ids {
		m.images[ids[i]] = struct{}{}
	}
}

// ClearImages clears the "images" edge to the Images entity.
func (m *FilesMutation) ClearImages() {
	m.clearedimages = true
}

// ImagesCleared reports if the "images" edge to the Images entity was cleared.
func (m *FilesMutation) ImagesCleared() bool {
	return m.clearedimages
}

// RemoveImageIDs removes the "images" edge to the Images entity by IDs.
func (m *FilesMutation) RemoveImageIDs(ids ...uint64) {
	if m.removedimages == nil {
		m.removedimages = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.images, ids[i])
		m.removedimages[ids[i]] = struct{}{}
	}
}

// RemovedImages returns the removed IDs of the "images" edge to the Images entity.
func (m *FilesMutation) RemovedImagesIDs() (ids []uint64) {
	for id := range m.removedimages {
		ids = append(ids, id)
	}
	return
}

// ImagesIDs returns the "images" edge IDs in the mutation.
func (m *FilesMutation) ImagesIDs() (ids []uint64) {
	for id := range m.images {
		ids = append(ids, id)
	}
	return
}

// ResetImages resets all changes to the "images" edge.
func (m *FilesMutation) ResetImages() {
	m.images = nil
	m.clearedimages = false
	m.removedimages = nil
}

// Where appends a list predicates to the FilesMutation builder.
func (m *FilesMutation) Where(ps ...predicate.Files) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FilesMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FilesMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Files, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FilesMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FilesMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Files).
func (m *FilesMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FilesMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.hash != nil {
		fields = append(fields, files.FieldHash)
	}
	if m.name != nil {
		fields = append(fields, files.FieldName)
	}
	if m.size != nil {
		fields = append(fields, files.FieldSize)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FilesMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case files.FieldHash:
		return m.Hash()
	case files.FieldName:
		return m.Name()
	case files.FieldSize:
		return m.Size()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FilesMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case files.FieldHash:
		return m.OldHash(ctx)
	case files.FieldName:
		return m.OldName(ctx)
	case files.FieldSize:
		return m.OldSize(ctx)
	}
	return nil, fmt.Errorf("unknown Files field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FilesMutation) SetField(name string, value ent.Value) error {
	switch name {
	case files.FieldHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHash(v)
		return nil
	case files.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case files.FieldSize:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSize(v)
		return nil
	}
	return fmt.Errorf("unknown Files field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FilesMutation) AddedFields() []string {
	var fields []string
	if m.addsize != nil {
		fields = append(fields, files.FieldSize)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FilesMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case files.FieldSize:
		return m.AddedSize()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FilesMutation) AddField(name string, value ent.Value) error {
	switch name {
	case files.FieldSize:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSize(v)
		return nil
	}
	return fmt.Errorf("unknown Files numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FilesMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FilesMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FilesMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Files nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FilesMutation) ResetField(name string) error {
	switch name {
	case files.FieldHash:
		m.ResetHash()
		return nil
	case files.FieldName:
		m.ResetName()
		return nil
	case files.FieldSize:
		m.ResetSize()
		return nil
	}
	return fmt.Errorf("unknown Files field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FilesMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.musics != nil {
		edges = append(edges, files.EdgeMusics)
	}
	if m.images != nil {
		edges = append(edges, files.EdgeImages)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FilesMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case files.EdgeMusics:
		ids := make([]ent.Value, 0, len(m.musics))
		for id := range m.musics {
			ids = append(ids, id)
		}
		return ids
	case files.EdgeImages:
		ids := make([]ent.Value, 0, len(m.images))
		for id := range m.images {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FilesMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedmusics != nil {
		edges = append(edges, files.EdgeMusics)
	}
	if m.removedimages != nil {
		edges = append(edges, files.EdgeImages)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FilesMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case files.EdgeMusics:
		ids := make([]ent.Value, 0, len(m.removedmusics))
		for id := range m.removedmusics {
			ids = append(ids, id)
		}
		return ids
	case files.EdgeImages:
		ids := make([]ent.Value, 0, len(m.removedimages))
		for id := range m.removedimages {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FilesMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedmusics {
		edges = append(edges, files.EdgeMusics)
	}
	if m.clearedimages {
		edges = append(edges, files.EdgeImages)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FilesMutation) EdgeCleared(name string) bool {
	switch name {
	case files.EdgeMusics:
		return m.clearedmusics
	case files.EdgeImages:
		return m.clearedimages
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FilesMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Files unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FilesMutation) ResetEdge(name string) error {
	switch name {
	case files.EdgeMusics:
		m.ResetMusics()
		return nil
	case files.EdgeImages:
		m.ResetImages()
		return nil
	}
	return fmt.Errorf("unknown Files edge %s", name)
}

// ImagesMutation represents an operation that mutates the Images nodes in the graph.
type ImagesMutation struct {
	config
	op               Op
	typ              string
	id               *uint64
	create_time      *time.Time
	update_time      *time.Time
	width            *int32
	addwidth         *int32
	height           *int32
	addheight        *int32
	clearedFields    map[string]struct{}
	file             *uint64
	clearedfile      bool
	albums           map[uint64]struct{}
	removedalbums    map[uint64]struct{}
	clearedalbums    bool
	playlists        map[uint64]struct{}
	removedplaylists map[uint64]struct{}
	clearedplaylists bool
	done             bool
	oldValue         func(context.Context) (*Images, error)
	predicates       []predicate.Images
}

var _ ent.Mutation = (*ImagesMutation)(nil)

// imagesOption allows management of the mutation configuration using functional options.
type imagesOption func(*ImagesMutation)

// newImagesMutation creates new mutation for the Images entity.
func newImagesMutation(c config, op Op, opts ...imagesOption) *ImagesMutation {
	m := &ImagesMutation{
		config:        c,
		op:            op,
		typ:           TypeImages,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withImagesID sets the ID field of the mutation.
func withImagesID(id uint64) imagesOption {
	return func(m *ImagesMutation) {
		var (
			err   error
			once  sync.Once
			value *Images
		)
		m.oldValue = func(ctx context.Context) (*Images, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Images.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withImages sets the old Images of the mutation.
func withImages(node *Images) imagesOption {
	return func(m *ImagesMutation) {
		m.oldValue = func(context.Context) (*Images, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ImagesMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ImagesMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Images entities.
func (m *ImagesMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ImagesMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ImagesMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Images.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *ImagesMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ImagesMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Images entity.
// If the Images object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImagesMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ImagesMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ImagesMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ImagesMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Images entity.
// If the Images object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImagesMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ImagesMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetWidth sets the "width" field.
func (m *ImagesMutation) SetWidth(i int32) {
	m.width = &i
	m.addwidth = nil
}

// Width returns the value of the "width" field in the mutation.
func (m *ImagesMutation) Width() (r int32, exists bool) {
	v := m.width
	if v == nil {
		return
	}
	return *v, true
}

// OldWidth returns the old "width" field's value of the Images entity.
// If the Images object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImagesMutation) OldWidth(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWidth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWidth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWidth: %w", err)
	}
	return oldValue.Width, nil
}

// AddWidth adds i to the "width" field.
func (m *ImagesMutation) AddWidth(i int32) {
	if m.addwidth != nil {
		*m.addwidth += i
	} else {
		m.addwidth = &i
	}
}

// AddedWidth returns the value that was added to the "width" field in this mutation.
func (m *ImagesMutation) AddedWidth() (r int32, exists bool) {
	v := m.addwidth
	if v == nil {
		return
	}
	return *v, true
}

// ResetWidth resets all changes to the "width" field.
func (m *ImagesMutation) ResetWidth() {
	m.width = nil
	m.addwidth = nil
}

// SetHeight sets the "height" field.
func (m *ImagesMutation) SetHeight(i int32) {
	m.height = &i
	m.addheight = nil
}

// Height returns the value of the "height" field in the mutation.
func (m *ImagesMutation) Height() (r int32, exists bool) {
	v := m.height
	if v == nil {
		return
	}
	return *v, true
}

// OldHeight returns the old "height" field's value of the Images entity.
// If the Images object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImagesMutation) OldHeight(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeight: %w", err)
	}
	return oldValue.Height, nil
}

// AddHeight adds i to the "height" field.
func (m *ImagesMutation) AddHeight(i int32) {
	if m.addheight != nil {
		*m.addheight += i
	} else {
		m.addheight = &i
	}
}

// AddedHeight returns the value that was added to the "height" field in this mutation.
func (m *ImagesMutation) AddedHeight() (r int32, exists bool) {
	v := m.addheight
	if v == nil {
		return
	}
	return *v, true
}

// ResetHeight resets all changes to the "height" field.
func (m *ImagesMutation) ResetHeight() {
	m.height = nil
	m.addheight = nil
}

// SetFileID sets the "file" edge to the Files entity by id.
func (m *ImagesMutation) SetFileID(id uint64) {
	m.file = &id
}

// ClearFile clears the "file" edge to the Files entity.
func (m *ImagesMutation) ClearFile() {
	m.clearedfile = true
}

// FileCleared reports if the "file" edge to the Files entity was cleared.
func (m *ImagesMutation) FileCleared() bool {
	return m.clearedfile
}

// FileID returns the "file" edge ID in the mutation.
func (m *ImagesMutation) FileID() (id uint64, exists bool) {
	if m.file != nil {
		return *m.file, true
	}
	return
}

// FileIDs returns the "file" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FileID instead. It exists only for internal usage by the builders.
func (m *ImagesMutation) FileIDs() (ids []uint64) {
	if id := m.file; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFile resets all changes to the "file" edge.
func (m *ImagesMutation) ResetFile() {
	m.file = nil
	m.clearedfile = false
}

// AddAlbumIDs adds the "albums" edge to the Albums entity by ids.
func (m *ImagesMutation) AddAlbumIDs(ids ...uint64) {
	if m.albums == nil {
		m.albums = make(map[uint64]struct{})
	}
	for i := range ids {
		m.albums[ids[i]] = struct{}{}
	}
}

// ClearAlbums clears the "albums" edge to the Albums entity.
func (m *ImagesMutation) ClearAlbums() {
	m.clearedalbums = true
}

// AlbumsCleared reports if the "albums" edge to the Albums entity was cleared.
func (m *ImagesMutation) AlbumsCleared() bool {
	return m.clearedalbums
}

// RemoveAlbumIDs removes the "albums" edge to the Albums entity by IDs.
func (m *ImagesMutation) RemoveAlbumIDs(ids ...uint64) {
	if m.removedalbums == nil {
		m.removedalbums = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.albums, ids[i])
		m.removedalbums[ids[i]] = struct{}{}
	}
}

// RemovedAlbums returns the removed IDs of the "albums" edge to the Albums entity.
func (m *ImagesMutation) RemovedAlbumsIDs() (ids []uint64) {
	for id := range m.removedalbums {
		ids = append(ids, id)
	}
	return
}

// AlbumsIDs returns the "albums" edge IDs in the mutation.
func (m *ImagesMutation) AlbumsIDs() (ids []uint64) {
	for id := range m.albums {
		ids = append(ids, id)
	}
	return
}

// ResetAlbums resets all changes to the "albums" edge.
func (m *ImagesMutation) ResetAlbums() {
	m.albums = nil
	m.clearedalbums = false
	m.removedalbums = nil
}

// AddPlaylistIDs adds the "playlists" edge to the Playlists entity by ids.
func (m *ImagesMutation) AddPlaylistIDs(ids ...uint64) {
	if m.playlists == nil {
		m.playlists = make(map[uint64]struct{})
	}
	for i := range ids {
		m.playlists[ids[i]] = struct{}{}
	}
}

// ClearPlaylists clears the "playlists" edge to the Playlists entity.
func (m *ImagesMutation) ClearPlaylists() {
	m.clearedplaylists = true
}

// PlaylistsCleared reports if the "playlists" edge to the Playlists entity was cleared.
func (m *ImagesMutation) PlaylistsCleared() bool {
	return m.clearedplaylists
}

// RemovePlaylistIDs removes the "playlists" edge to the Playlists entity by IDs.
func (m *ImagesMutation) RemovePlaylistIDs(ids ...uint64) {
	if m.removedplaylists == nil {
		m.removedplaylists = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.playlists, ids[i])
		m.removedplaylists[ids[i]] = struct{}{}
	}
}

// RemovedPlaylists returns the removed IDs of the "playlists" edge to the Playlists entity.
func (m *ImagesMutation) RemovedPlaylistsIDs() (ids []uint64) {
	for id := range m.removedplaylists {
		ids = append(ids, id)
	}
	return
}

// PlaylistsIDs returns the "playlists" edge IDs in the mutation.
func (m *ImagesMutation) PlaylistsIDs() (ids []uint64) {
	for id := range m.playlists {
		ids = append(ids, id)
	}
	return
}

// ResetPlaylists resets all changes to the "playlists" edge.
func (m *ImagesMutation) ResetPlaylists() {
	m.playlists = nil
	m.clearedplaylists = false
	m.removedplaylists = nil
}

// Where appends a list predicates to the ImagesMutation builder.
func (m *ImagesMutation) Where(ps ...predicate.Images) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ImagesMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ImagesMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Images, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ImagesMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ImagesMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Images).
func (m *ImagesMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ImagesMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.create_time != nil {
		fields = append(fields, images.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, images.FieldUpdateTime)
	}
	if m.width != nil {
		fields = append(fields, images.FieldWidth)
	}
	if m.height != nil {
		fields = append(fields, images.FieldHeight)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ImagesMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case images.FieldCreateTime:
		return m.CreateTime()
	case images.FieldUpdateTime:
		return m.UpdateTime()
	case images.FieldWidth:
		return m.Width()
	case images.FieldHeight:
		return m.Height()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ImagesMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case images.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case images.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case images.FieldWidth:
		return m.OldWidth(ctx)
	case images.FieldHeight:
		return m.OldHeight(ctx)
	}
	return nil, fmt.Errorf("unknown Images field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ImagesMutation) SetField(name string, value ent.Value) error {
	switch name {
	case images.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case images.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case images.FieldWidth:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWidth(v)
		return nil
	case images.FieldHeight:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeight(v)
		return nil
	}
	return fmt.Errorf("unknown Images field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ImagesMutation) AddedFields() []string {
	var fields []string
	if m.addwidth != nil {
		fields = append(fields, images.FieldWidth)
	}
	if m.addheight != nil {
		fields = append(fields, images.FieldHeight)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ImagesMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case images.FieldWidth:
		return m.AddedWidth()
	case images.FieldHeight:
		return m.AddedHeight()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ImagesMutation) AddField(name string, value ent.Value) error {
	switch name {
	case images.FieldWidth:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWidth(v)
		return nil
	case images.FieldHeight:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHeight(v)
		return nil
	}
	return fmt.Errorf("unknown Images numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ImagesMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ImagesMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ImagesMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Images nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ImagesMutation) ResetField(name string) error {
	switch name {
	case images.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case images.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case images.FieldWidth:
		m.ResetWidth()
		return nil
	case images.FieldHeight:
		m.ResetHeight()
		return nil
	}
	return fmt.Errorf("unknown Images field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ImagesMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.file != nil {
		edges = append(edges, images.EdgeFile)
	}
	if m.albums != nil {
		edges = append(edges, images.EdgeAlbums)
	}
	if m.playlists != nil {
		edges = append(edges, images.EdgePlaylists)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ImagesMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case images.EdgeFile:
		if id := m.file; id != nil {
			return []ent.Value{*id}
		}
	case images.EdgeAlbums:
		ids := make([]ent.Value, 0, len(m.albums))
		for id := range m.albums {
			ids = append(ids, id)
		}
		return ids
	case images.EdgePlaylists:
		ids := make([]ent.Value, 0, len(m.playlists))
		for id := range m.playlists {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ImagesMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedalbums != nil {
		edges = append(edges, images.EdgeAlbums)
	}
	if m.removedplaylists != nil {
		edges = append(edges, images.EdgePlaylists)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ImagesMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case images.EdgeAlbums:
		ids := make([]ent.Value, 0, len(m.removedalbums))
		for id := range m.removedalbums {
			ids = append(ids, id)
		}
		return ids
	case images.EdgePlaylists:
		ids := make([]ent.Value, 0, len(m.removedplaylists))
		for id := range m.removedplaylists {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ImagesMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedfile {
		edges = append(edges, images.EdgeFile)
	}
	if m.clearedalbums {
		edges = append(edges, images.EdgeAlbums)
	}
	if m.clearedplaylists {
		edges = append(edges, images.EdgePlaylists)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ImagesMutation) EdgeCleared(name string) bool {
	switch name {
	case images.EdgeFile:
		return m.clearedfile
	case images.EdgeAlbums:
		return m.clearedalbums
	case images.EdgePlaylists:
		return m.clearedplaylists
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ImagesMutation) ClearEdge(name string) error {
	switch name {
	case images.EdgeFile:
		m.ClearFile()
		return nil
	}
	return fmt.Errorf("unknown Images unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ImagesMutation) ResetEdge(name string) error {
	switch name {
	case images.EdgeFile:
		m.ResetFile()
		return nil
	case images.EdgeAlbums:
		m.ResetAlbums()
		return nil
	case images.EdgePlaylists:
		m.ResetPlaylists()
		return nil
	}
	return fmt.Errorf("unknown Images edge %s", name)
}

// MusicsMutation represents an operation that mutates the Musics nodes in the graph.
type MusicsMutation struct {
	config
	op               Op
	typ              string
	id               *uint64
	create_time      *time.Time
	update_time      *time.Time
	name             *string
	description      *string
	clearedFields    map[string]struct{}
	users            map[uint64]struct{}
	removedusers     map[uint64]struct{}
	clearedusers     bool
	file             *uint64
	clearedfile      bool
	artists          map[uint64]struct{}
	removedartists   map[uint64]struct{}
	clearedartists   bool
	playlists        map[uint64]struct{}
	removedplaylists map[uint64]struct{}
	clearedplaylists bool
	albums           map[uint64]struct{}
	removedalbums    map[uint64]struct{}
	clearedalbums    bool
	done             bool
	oldValue         func(context.Context) (*Musics, error)
	predicates       []predicate.Musics
}

var _ ent.Mutation = (*MusicsMutation)(nil)

// musicsOption allows management of the mutation configuration using functional options.
type musicsOption func(*MusicsMutation)

// newMusicsMutation creates new mutation for the Musics entity.
func newMusicsMutation(c config, op Op, opts ...musicsOption) *MusicsMutation {
	m := &MusicsMutation{
		config:        c,
		op:            op,
		typ:           TypeMusics,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMusicsID sets the ID field of the mutation.
func withMusicsID(id uint64) musicsOption {
	return func(m *MusicsMutation) {
		var (
			err   error
			once  sync.Once
			value *Musics
		)
		m.oldValue = func(ctx context.Context) (*Musics, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Musics.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMusics sets the old Musics of the mutation.
func withMusics(node *Musics) musicsOption {
	return func(m *MusicsMutation) {
		m.oldValue = func(context.Context) (*Musics, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MusicsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MusicsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Musics entities.
func (m *MusicsMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MusicsMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MusicsMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Musics.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *MusicsMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *MusicsMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Musics entity.
// If the Musics object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MusicsMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *MusicsMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *MusicsMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *MusicsMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Musics entity.
// If the Musics object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MusicsMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *MusicsMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetName sets the "name" field.
func (m *MusicsMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *MusicsMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Musics entity.
// If the Musics object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MusicsMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *MusicsMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *MusicsMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *MusicsMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Musics entity.
// If the Musics object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MusicsMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *MusicsMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[musics.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *MusicsMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[musics.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *MusicsMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, musics.FieldDescription)
}

// AddUserIDs adds the "users" edge to the Users entity by ids.
func (m *MusicsMutation) AddUserIDs(ids ...uint64) {
	if m.users == nil {
		m.users = make(map[uint64]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the Users entity.
func (m *MusicsMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the Users entity was cleared.
func (m *MusicsMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the Users entity by IDs.
func (m *MusicsMutation) RemoveUserIDs(ids ...uint64) {
	if m.removedusers == nil {
		m.removedusers = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.users, ids[i])
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the Users entity.
func (m *MusicsMutation) RemovedUsersIDs() (ids []uint64) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *MusicsMutation) UsersIDs() (ids []uint64) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *MusicsMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// SetFileID sets the "file" edge to the Files entity by id.
func (m *MusicsMutation) SetFileID(id uint64) {
	m.file = &id
}

// ClearFile clears the "file" edge to the Files entity.
func (m *MusicsMutation) ClearFile() {
	m.clearedfile = true
}

// FileCleared reports if the "file" edge to the Files entity was cleared.
func (m *MusicsMutation) FileCleared() bool {
	return m.clearedfile
}

// FileID returns the "file" edge ID in the mutation.
func (m *MusicsMutation) FileID() (id uint64, exists bool) {
	if m.file != nil {
		return *m.file, true
	}
	return
}

// FileIDs returns the "file" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FileID instead. It exists only for internal usage by the builders.
func (m *MusicsMutation) FileIDs() (ids []uint64) {
	if id := m.file; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFile resets all changes to the "file" edge.
func (m *MusicsMutation) ResetFile() {
	m.file = nil
	m.clearedfile = false
}

// AddArtistIDs adds the "artists" edge to the Artists entity by ids.
func (m *MusicsMutation) AddArtistIDs(ids ...uint64) {
	if m.artists == nil {
		m.artists = make(map[uint64]struct{})
	}
	for i := range ids {
		m.artists[ids[i]] = struct{}{}
	}
}

// ClearArtists clears the "artists" edge to the Artists entity.
func (m *MusicsMutation) ClearArtists() {
	m.clearedartists = true
}

// ArtistsCleared reports if the "artists" edge to the Artists entity was cleared.
func (m *MusicsMutation) ArtistsCleared() bool {
	return m.clearedartists
}

// RemoveArtistIDs removes the "artists" edge to the Artists entity by IDs.
func (m *MusicsMutation) RemoveArtistIDs(ids ...uint64) {
	if m.removedartists == nil {
		m.removedartists = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.artists, ids[i])
		m.removedartists[ids[i]] = struct{}{}
	}
}

// RemovedArtists returns the removed IDs of the "artists" edge to the Artists entity.
func (m *MusicsMutation) RemovedArtistsIDs() (ids []uint64) {
	for id := range m.removedartists {
		ids = append(ids, id)
	}
	return
}

// ArtistsIDs returns the "artists" edge IDs in the mutation.
func (m *MusicsMutation) ArtistsIDs() (ids []uint64) {
	for id := range m.artists {
		ids = append(ids, id)
	}
	return
}

// ResetArtists resets all changes to the "artists" edge.
func (m *MusicsMutation) ResetArtists() {
	m.artists = nil
	m.clearedartists = false
	m.removedartists = nil
}

// AddPlaylistIDs adds the "playlists" edge to the Playlists entity by ids.
func (m *MusicsMutation) AddPlaylistIDs(ids ...uint64) {
	if m.playlists == nil {
		m.playlists = make(map[uint64]struct{})
	}
	for i := range ids {
		m.playlists[ids[i]] = struct{}{}
	}
}

// ClearPlaylists clears the "playlists" edge to the Playlists entity.
func (m *MusicsMutation) ClearPlaylists() {
	m.clearedplaylists = true
}

// PlaylistsCleared reports if the "playlists" edge to the Playlists entity was cleared.
func (m *MusicsMutation) PlaylistsCleared() bool {
	return m.clearedplaylists
}

// RemovePlaylistIDs removes the "playlists" edge to the Playlists entity by IDs.
func (m *MusicsMutation) RemovePlaylistIDs(ids ...uint64) {
	if m.removedplaylists == nil {
		m.removedplaylists = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.playlists, ids[i])
		m.removedplaylists[ids[i]] = struct{}{}
	}
}

// RemovedPlaylists returns the removed IDs of the "playlists" edge to the Playlists entity.
func (m *MusicsMutation) RemovedPlaylistsIDs() (ids []uint64) {
	for id := range m.removedplaylists {
		ids = append(ids, id)
	}
	return
}

// PlaylistsIDs returns the "playlists" edge IDs in the mutation.
func (m *MusicsMutation) PlaylistsIDs() (ids []uint64) {
	for id := range m.playlists {
		ids = append(ids, id)
	}
	return
}

// ResetPlaylists resets all changes to the "playlists" edge.
func (m *MusicsMutation) ResetPlaylists() {
	m.playlists = nil
	m.clearedplaylists = false
	m.removedplaylists = nil
}

// AddAlbumIDs adds the "albums" edge to the Albums entity by ids.
func (m *MusicsMutation) AddAlbumIDs(ids ...uint64) {
	if m.albums == nil {
		m.albums = make(map[uint64]struct{})
	}
	for i := range ids {
		m.albums[ids[i]] = struct{}{}
	}
}

// ClearAlbums clears the "albums" edge to the Albums entity.
func (m *MusicsMutation) ClearAlbums() {
	m.clearedalbums = true
}

// AlbumsCleared reports if the "albums" edge to the Albums entity was cleared.
func (m *MusicsMutation) AlbumsCleared() bool {
	return m.clearedalbums
}

// RemoveAlbumIDs removes the "albums" edge to the Albums entity by IDs.
func (m *MusicsMutation) RemoveAlbumIDs(ids ...uint64) {
	if m.removedalbums == nil {
		m.removedalbums = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.albums, ids[i])
		m.removedalbums[ids[i]] = struct{}{}
	}
}

// RemovedAlbums returns the removed IDs of the "albums" edge to the Albums entity.
func (m *MusicsMutation) RemovedAlbumsIDs() (ids []uint64) {
	for id := range m.removedalbums {
		ids = append(ids, id)
	}
	return
}

// AlbumsIDs returns the "albums" edge IDs in the mutation.
func (m *MusicsMutation) AlbumsIDs() (ids []uint64) {
	for id := range m.albums {
		ids = append(ids, id)
	}
	return
}

// ResetAlbums resets all changes to the "albums" edge.
func (m *MusicsMutation) ResetAlbums() {
	m.albums = nil
	m.clearedalbums = false
	m.removedalbums = nil
}

// Where appends a list predicates to the MusicsMutation builder.
func (m *MusicsMutation) Where(ps ...predicate.Musics) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MusicsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MusicsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Musics, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MusicsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MusicsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Musics).
func (m *MusicsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MusicsMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.create_time != nil {
		fields = append(fields, musics.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, musics.FieldUpdateTime)
	}
	if m.name != nil {
		fields = append(fields, musics.FieldName)
	}
	if m.description != nil {
		fields = append(fields, musics.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MusicsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case musics.FieldCreateTime:
		return m.CreateTime()
	case musics.FieldUpdateTime:
		return m.UpdateTime()
	case musics.FieldName:
		return m.Name()
	case musics.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MusicsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case musics.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case musics.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case musics.FieldName:
		return m.OldName(ctx)
	case musics.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Musics field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MusicsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case musics.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case musics.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case musics.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case musics.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Musics field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MusicsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MusicsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MusicsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Musics numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MusicsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(musics.FieldDescription) {
		fields = append(fields, musics.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MusicsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MusicsMutation) ClearField(name string) error {
	switch name {
	case musics.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Musics nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MusicsMutation) ResetField(name string) error {
	switch name {
	case musics.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case musics.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case musics.FieldName:
		m.ResetName()
		return nil
	case musics.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Musics field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MusicsMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.users != nil {
		edges = append(edges, musics.EdgeUsers)
	}
	if m.file != nil {
		edges = append(edges, musics.EdgeFile)
	}
	if m.artists != nil {
		edges = append(edges, musics.EdgeArtists)
	}
	if m.playlists != nil {
		edges = append(edges, musics.EdgePlaylists)
	}
	if m.albums != nil {
		edges = append(edges, musics.EdgeAlbums)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MusicsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case musics.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	case musics.EdgeFile:
		if id := m.file; id != nil {
			return []ent.Value{*id}
		}
	case musics.EdgeArtists:
		ids := make([]ent.Value, 0, len(m.artists))
		for id := range m.artists {
			ids = append(ids, id)
		}
		return ids
	case musics.EdgePlaylists:
		ids := make([]ent.Value, 0, len(m.playlists))
		for id := range m.playlists {
			ids = append(ids, id)
		}
		return ids
	case musics.EdgeAlbums:
		ids := make([]ent.Value, 0, len(m.albums))
		for id := range m.albums {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MusicsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedusers != nil {
		edges = append(edges, musics.EdgeUsers)
	}
	if m.removedartists != nil {
		edges = append(edges, musics.EdgeArtists)
	}
	if m.removedplaylists != nil {
		edges = append(edges, musics.EdgePlaylists)
	}
	if m.removedalbums != nil {
		edges = append(edges, musics.EdgeAlbums)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MusicsMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case musics.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	case musics.EdgeArtists:
		ids := make([]ent.Value, 0, len(m.removedartists))
		for id := range m.removedartists {
			ids = append(ids, id)
		}
		return ids
	case musics.EdgePlaylists:
		ids := make([]ent.Value, 0, len(m.removedplaylists))
		for id := range m.removedplaylists {
			ids = append(ids, id)
		}
		return ids
	case musics.EdgeAlbums:
		ids := make([]ent.Value, 0, len(m.removedalbums))
		for id := range m.removedalbums {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MusicsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedusers {
		edges = append(edges, musics.EdgeUsers)
	}
	if m.clearedfile {
		edges = append(edges, musics.EdgeFile)
	}
	if m.clearedartists {
		edges = append(edges, musics.EdgeArtists)
	}
	if m.clearedplaylists {
		edges = append(edges, musics.EdgePlaylists)
	}
	if m.clearedalbums {
		edges = append(edges, musics.EdgeAlbums)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MusicsMutation) EdgeCleared(name string) bool {
	switch name {
	case musics.EdgeUsers:
		return m.clearedusers
	case musics.EdgeFile:
		return m.clearedfile
	case musics.EdgeArtists:
		return m.clearedartists
	case musics.EdgePlaylists:
		return m.clearedplaylists
	case musics.EdgeAlbums:
		return m.clearedalbums
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MusicsMutation) ClearEdge(name string) error {
	switch name {
	case musics.EdgeFile:
		m.ClearFile()
		return nil
	}
	return fmt.Errorf("unknown Musics unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MusicsMutation) ResetEdge(name string) error {
	switch name {
	case musics.EdgeUsers:
		m.ResetUsers()
		return nil
	case musics.EdgeFile:
		m.ResetFile()
		return nil
	case musics.EdgeArtists:
		m.ResetArtists()
		return nil
	case musics.EdgePlaylists:
		m.ResetPlaylists()
		return nil
	case musics.EdgeAlbums:
		m.ResetAlbums()
		return nil
	}
	return fmt.Errorf("unknown Musics edge %s", name)
}

// OidcMutation represents an operation that mutates the Oidc nodes in the graph.
type OidcMutation struct {
	config
	op                     Op
	typ                    string
	id                     *uint64
	create_time            *time.Time
	update_time            *time.Time
	name                   *string
	configuration_endpoint *string
	clearedFields          map[string]struct{}
	done                   bool
	oldValue               func(context.Context) (*Oidc, error)
	predicates             []predicate.Oidc
}

var _ ent.Mutation = (*OidcMutation)(nil)

// oidcOption allows management of the mutation configuration using functional options.
type oidcOption func(*OidcMutation)

// newOidcMutation creates new mutation for the Oidc entity.
func newOidcMutation(c config, op Op, opts ...oidcOption) *OidcMutation {
	m := &OidcMutation{
		config:        c,
		op:            op,
		typ:           TypeOidc,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOidcID sets the ID field of the mutation.
func withOidcID(id uint64) oidcOption {
	return func(m *OidcMutation) {
		var (
			err   error
			once  sync.Once
			value *Oidc
		)
		m.oldValue = func(ctx context.Context) (*Oidc, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Oidc.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOidc sets the old Oidc of the mutation.
func withOidc(node *Oidc) oidcOption {
	return func(m *OidcMutation) {
		m.oldValue = func(context.Context) (*Oidc, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OidcMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OidcMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Oidc entities.
func (m *OidcMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OidcMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OidcMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Oidc.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *OidcMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *OidcMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Oidc entity.
// If the Oidc object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OidcMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *OidcMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *OidcMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *OidcMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Oidc entity.
// If the Oidc object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OidcMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *OidcMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetName sets the "name" field.
func (m *OidcMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *OidcMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Oidc entity.
// If the Oidc object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OidcMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *OidcMutation) ResetName() {
	m.name = nil
}

// SetConfigurationEndpoint sets the "configuration_endpoint" field.
func (m *OidcMutation) SetConfigurationEndpoint(s string) {
	m.configuration_endpoint = &s
}

// ConfigurationEndpoint returns the value of the "configuration_endpoint" field in the mutation.
func (m *OidcMutation) ConfigurationEndpoint() (r string, exists bool) {
	v := m.configuration_endpoint
	if v == nil {
		return
	}
	return *v, true
}

// OldConfigurationEndpoint returns the old "configuration_endpoint" field's value of the Oidc entity.
// If the Oidc object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OidcMutation) OldConfigurationEndpoint(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConfigurationEndpoint is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConfigurationEndpoint requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfigurationEndpoint: %w", err)
	}
	return oldValue.ConfigurationEndpoint, nil
}

// ResetConfigurationEndpoint resets all changes to the "configuration_endpoint" field.
func (m *OidcMutation) ResetConfigurationEndpoint() {
	m.configuration_endpoint = nil
}

// Where appends a list predicates to the OidcMutation builder.
func (m *OidcMutation) Where(ps ...predicate.Oidc) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OidcMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OidcMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Oidc, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OidcMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OidcMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Oidc).
func (m *OidcMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OidcMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.create_time != nil {
		fields = append(fields, oidc.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, oidc.FieldUpdateTime)
	}
	if m.name != nil {
		fields = append(fields, oidc.FieldName)
	}
	if m.configuration_endpoint != nil {
		fields = append(fields, oidc.FieldConfigurationEndpoint)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OidcMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case oidc.FieldCreateTime:
		return m.CreateTime()
	case oidc.FieldUpdateTime:
		return m.UpdateTime()
	case oidc.FieldName:
		return m.Name()
	case oidc.FieldConfigurationEndpoint:
		return m.ConfigurationEndpoint()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OidcMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case oidc.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case oidc.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case oidc.FieldName:
		return m.OldName(ctx)
	case oidc.FieldConfigurationEndpoint:
		return m.OldConfigurationEndpoint(ctx)
	}
	return nil, fmt.Errorf("unknown Oidc field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OidcMutation) SetField(name string, value ent.Value) error {
	switch name {
	case oidc.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case oidc.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case oidc.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case oidc.FieldConfigurationEndpoint:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfigurationEndpoint(v)
		return nil
	}
	return fmt.Errorf("unknown Oidc field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OidcMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OidcMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OidcMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Oidc numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OidcMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OidcMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OidcMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Oidc nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OidcMutation) ResetField(name string) error {
	switch name {
	case oidc.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case oidc.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case oidc.FieldName:
		m.ResetName()
		return nil
	case oidc.FieldConfigurationEndpoint:
		m.ResetConfigurationEndpoint()
		return nil
	}
	return fmt.Errorf("unknown Oidc field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OidcMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OidcMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OidcMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OidcMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OidcMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OidcMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OidcMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Oidc unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OidcMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Oidc edge %s", name)
}

// PlaylistsMutation represents an operation that mutates the Playlists nodes in the graph.
type PlaylistsMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	create_time   *time.Time
	update_time   *time.Time
	name          *string
	description   *string
	private       *bool
	clearedFields map[string]struct{}
	owner         *uint64
	clearedowner  bool
	musics        map[uint64]struct{}
	removedmusics map[uint64]struct{}
	clearedmusics bool
	image         *uint64
	clearedimage  bool
	done          bool
	oldValue      func(context.Context) (*Playlists, error)
	predicates    []predicate.Playlists
}

var _ ent.Mutation = (*PlaylistsMutation)(nil)

// playlistsOption allows management of the mutation configuration using functional options.
type playlistsOption func(*PlaylistsMutation)

// newPlaylistsMutation creates new mutation for the Playlists entity.
func newPlaylistsMutation(c config, op Op, opts ...playlistsOption) *PlaylistsMutation {
	m := &PlaylistsMutation{
		config:        c,
		op:            op,
		typ:           TypePlaylists,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPlaylistsID sets the ID field of the mutation.
func withPlaylistsID(id uint64) playlistsOption {
	return func(m *PlaylistsMutation) {
		var (
			err   error
			once  sync.Once
			value *Playlists
		)
		m.oldValue = func(ctx context.Context) (*Playlists, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Playlists.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPlaylists sets the old Playlists of the mutation.
func withPlaylists(node *Playlists) playlistsOption {
	return func(m *PlaylistsMutation) {
		m.oldValue = func(context.Context) (*Playlists, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PlaylistsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PlaylistsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Playlists entities.
func (m *PlaylistsMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PlaylistsMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PlaylistsMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Playlists.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *PlaylistsMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *PlaylistsMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Playlists entity.
// If the Playlists object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlaylistsMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *PlaylistsMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *PlaylistsMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *PlaylistsMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Playlists entity.
// If the Playlists object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlaylistsMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *PlaylistsMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetName sets the "name" field.
func (m *PlaylistsMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PlaylistsMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Playlists entity.
// If the Playlists object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlaylistsMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PlaylistsMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *PlaylistsMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *PlaylistsMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Playlists entity.
// If the Playlists object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlaylistsMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *PlaylistsMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[playlists.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *PlaylistsMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[playlists.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *PlaylistsMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, playlists.FieldDescription)
}

// SetPrivate sets the "private" field.
func (m *PlaylistsMutation) SetPrivate(b bool) {
	m.private = &b
}

// Private returns the value of the "private" field in the mutation.
func (m *PlaylistsMutation) Private() (r bool, exists bool) {
	v := m.private
	if v == nil {
		return
	}
	return *v, true
}

// OldPrivate returns the old "private" field's value of the Playlists entity.
// If the Playlists object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlaylistsMutation) OldPrivate(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrivate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrivate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrivate: %w", err)
	}
	return oldValue.Private, nil
}

// ResetPrivate resets all changes to the "private" field.
func (m *PlaylistsMutation) ResetPrivate() {
	m.private = nil
}

// SetOwnerID sets the "owner" edge to the Users entity by id.
func (m *PlaylistsMutation) SetOwnerID(id uint64) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the Users entity.
func (m *PlaylistsMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the Users entity was cleared.
func (m *PlaylistsMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *PlaylistsMutation) OwnerID() (id uint64, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *PlaylistsMutation) OwnerIDs() (ids []uint64) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *PlaylistsMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// AddMusicIDs adds the "musics" edge to the Musics entity by ids.
func (m *PlaylistsMutation) AddMusicIDs(ids ...uint64) {
	if m.musics == nil {
		m.musics = make(map[uint64]struct{})
	}
	for i := range ids {
		m.musics[ids[i]] = struct{}{}
	}
}

// ClearMusics clears the "musics" edge to the Musics entity.
func (m *PlaylistsMutation) ClearMusics() {
	m.clearedmusics = true
}

// MusicsCleared reports if the "musics" edge to the Musics entity was cleared.
func (m *PlaylistsMutation) MusicsCleared() bool {
	return m.clearedmusics
}

// RemoveMusicIDs removes the "musics" edge to the Musics entity by IDs.
func (m *PlaylistsMutation) RemoveMusicIDs(ids ...uint64) {
	if m.removedmusics == nil {
		m.removedmusics = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.musics, ids[i])
		m.removedmusics[ids[i]] = struct{}{}
	}
}

// RemovedMusics returns the removed IDs of the "musics" edge to the Musics entity.
func (m *PlaylistsMutation) RemovedMusicsIDs() (ids []uint64) {
	for id := range m.removedmusics {
		ids = append(ids, id)
	}
	return
}

// MusicsIDs returns the "musics" edge IDs in the mutation.
func (m *PlaylistsMutation) MusicsIDs() (ids []uint64) {
	for id := range m.musics {
		ids = append(ids, id)
	}
	return
}

// ResetMusics resets all changes to the "musics" edge.
func (m *PlaylistsMutation) ResetMusics() {
	m.musics = nil
	m.clearedmusics = false
	m.removedmusics = nil
}

// SetImageID sets the "image" edge to the Images entity by id.
func (m *PlaylistsMutation) SetImageID(id uint64) {
	m.image = &id
}

// ClearImage clears the "image" edge to the Images entity.
func (m *PlaylistsMutation) ClearImage() {
	m.clearedimage = true
}

// ImageCleared reports if the "image" edge to the Images entity was cleared.
func (m *PlaylistsMutation) ImageCleared() bool {
	return m.clearedimage
}

// ImageID returns the "image" edge ID in the mutation.
func (m *PlaylistsMutation) ImageID() (id uint64, exists bool) {
	if m.image != nil {
		return *m.image, true
	}
	return
}

// ImageIDs returns the "image" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ImageID instead. It exists only for internal usage by the builders.
func (m *PlaylistsMutation) ImageIDs() (ids []uint64) {
	if id := m.image; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetImage resets all changes to the "image" edge.
func (m *PlaylistsMutation) ResetImage() {
	m.image = nil
	m.clearedimage = false
}

// Where appends a list predicates to the PlaylistsMutation builder.
func (m *PlaylistsMutation) Where(ps ...predicate.Playlists) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PlaylistsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PlaylistsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Playlists, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PlaylistsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PlaylistsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Playlists).
func (m *PlaylistsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PlaylistsMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.create_time != nil {
		fields = append(fields, playlists.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, playlists.FieldUpdateTime)
	}
	if m.name != nil {
		fields = append(fields, playlists.FieldName)
	}
	if m.description != nil {
		fields = append(fields, playlists.FieldDescription)
	}
	if m.private != nil {
		fields = append(fields, playlists.FieldPrivate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PlaylistsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case playlists.FieldCreateTime:
		return m.CreateTime()
	case playlists.FieldUpdateTime:
		return m.UpdateTime()
	case playlists.FieldName:
		return m.Name()
	case playlists.FieldDescription:
		return m.Description()
	case playlists.FieldPrivate:
		return m.Private()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PlaylistsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case playlists.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case playlists.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case playlists.FieldName:
		return m.OldName(ctx)
	case playlists.FieldDescription:
		return m.OldDescription(ctx)
	case playlists.FieldPrivate:
		return m.OldPrivate(ctx)
	}
	return nil, fmt.Errorf("unknown Playlists field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlaylistsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case playlists.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case playlists.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case playlists.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case playlists.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case playlists.FieldPrivate:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrivate(v)
		return nil
	}
	return fmt.Errorf("unknown Playlists field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PlaylistsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PlaylistsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlaylistsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Playlists numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PlaylistsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(playlists.FieldDescription) {
		fields = append(fields, playlists.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PlaylistsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PlaylistsMutation) ClearField(name string) error {
	switch name {
	case playlists.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Playlists nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PlaylistsMutation) ResetField(name string) error {
	switch name {
	case playlists.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case playlists.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case playlists.FieldName:
		m.ResetName()
		return nil
	case playlists.FieldDescription:
		m.ResetDescription()
		return nil
	case playlists.FieldPrivate:
		m.ResetPrivate()
		return nil
	}
	return fmt.Errorf("unknown Playlists field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PlaylistsMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.owner != nil {
		edges = append(edges, playlists.EdgeOwner)
	}
	if m.musics != nil {
		edges = append(edges, playlists.EdgeMusics)
	}
	if m.image != nil {
		edges = append(edges, playlists.EdgeImage)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PlaylistsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case playlists.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	case playlists.EdgeMusics:
		ids := make([]ent.Value, 0, len(m.musics))
		for id := range m.musics {
			ids = append(ids, id)
		}
		return ids
	case playlists.EdgeImage:
		if id := m.image; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PlaylistsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedmusics != nil {
		edges = append(edges, playlists.EdgeMusics)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PlaylistsMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case playlists.EdgeMusics:
		ids := make([]ent.Value, 0, len(m.removedmusics))
		for id := range m.removedmusics {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PlaylistsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedowner {
		edges = append(edges, playlists.EdgeOwner)
	}
	if m.clearedmusics {
		edges = append(edges, playlists.EdgeMusics)
	}
	if m.clearedimage {
		edges = append(edges, playlists.EdgeImage)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PlaylistsMutation) EdgeCleared(name string) bool {
	switch name {
	case playlists.EdgeOwner:
		return m.clearedowner
	case playlists.EdgeMusics:
		return m.clearedmusics
	case playlists.EdgeImage:
		return m.clearedimage
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PlaylistsMutation) ClearEdge(name string) error {
	switch name {
	case playlists.EdgeOwner:
		m.ClearOwner()
		return nil
	case playlists.EdgeImage:
		m.ClearImage()
		return nil
	}
	return fmt.Errorf("unknown Playlists unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PlaylistsMutation) ResetEdge(name string) error {
	switch name {
	case playlists.EdgeOwner:
		m.ResetOwner()
		return nil
	case playlists.EdgeMusics:
		m.ResetMusics()
		return nil
	case playlists.EdgeImage:
		m.ResetImage()
		return nil
	}
	return fmt.Errorf("unknown Playlists edge %s", name)
}

// UsersMutation represents an operation that mutates the Users nodes in the graph.
type UsersMutation struct {
	config
	op               Op
	typ              string
	id               *uint64
	create_time      *time.Time
	update_time      *time.Time
	username         *string
	password         *string
	email            *string
	name             *string
	bio              *string
	avatar           *string
	clearedFields    map[string]struct{}
	devices          map[uint64]struct{}
	removeddevices   map[uint64]struct{}
	cleareddevices   bool
	playlists        map[uint64]struct{}
	removedplaylists map[uint64]struct{}
	clearedplaylists bool
	albums           map[uint64]struct{}
	removedalbums    map[uint64]struct{}
	clearedalbums    bool
	musics           map[uint64]struct{}
	removedmusics    map[uint64]struct{}
	clearedmusics    bool
	done             bool
	oldValue         func(context.Context) (*Users, error)
	predicates       []predicate.Users
}

var _ ent.Mutation = (*UsersMutation)(nil)

// usersOption allows management of the mutation configuration using functional options.
type usersOption func(*UsersMutation)

// newUsersMutation creates new mutation for the Users entity.
func newUsersMutation(c config, op Op, opts ...usersOption) *UsersMutation {
	m := &UsersMutation{
		config:        c,
		op:            op,
		typ:           TypeUsers,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUsersID sets the ID field of the mutation.
func withUsersID(id uint64) usersOption {
	return func(m *UsersMutation) {
		var (
			err   error
			once  sync.Once
			value *Users
		)
		m.oldValue = func(ctx context.Context) (*Users, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Users.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUsers sets the old Users of the mutation.
func withUsers(node *Users) usersOption {
	return func(m *UsersMutation) {
		m.oldValue = func(context.Context) (*Users, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UsersMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UsersMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Users entities.
func (m *UsersMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UsersMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UsersMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Users.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *UsersMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *UsersMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *UsersMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *UsersMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *UsersMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *UsersMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetUsername sets the "username" field.
func (m *UsersMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UsersMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UsersMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the "password" field.
func (m *UsersMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UsersMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ClearPassword clears the value of the "password" field.
func (m *UsersMutation) ClearPassword() {
	m.password = nil
	m.clearedFields[users.FieldPassword] = struct{}{}
}

// PasswordCleared returns if the "password" field was cleared in this mutation.
func (m *UsersMutation) PasswordCleared() bool {
	_, ok := m.clearedFields[users.FieldPassword]
	return ok
}

// ResetPassword resets all changes to the "password" field.
func (m *UsersMutation) ResetPassword() {
	m.password = nil
	delete(m.clearedFields, users.FieldPassword)
}

// SetEmail sets the "email" field.
func (m *UsersMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UsersMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *UsersMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[users.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *UsersMutation) EmailCleared() bool {
	_, ok := m.clearedFields[users.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *UsersMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, users.FieldEmail)
}

// SetName sets the "name" field.
func (m *UsersMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UsersMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *UsersMutation) ClearName() {
	m.name = nil
	m.clearedFields[users.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *UsersMutation) NameCleared() bool {
	_, ok := m.clearedFields[users.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *UsersMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, users.FieldName)
}

// SetBio sets the "bio" field.
func (m *UsersMutation) SetBio(s string) {
	m.bio = &s
}

// Bio returns the value of the "bio" field in the mutation.
func (m *UsersMutation) Bio() (r string, exists bool) {
	v := m.bio
	if v == nil {
		return
	}
	return *v, true
}

// OldBio returns the old "bio" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldBio(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBio is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBio requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBio: %w", err)
	}
	return oldValue.Bio, nil
}

// ClearBio clears the value of the "bio" field.
func (m *UsersMutation) ClearBio() {
	m.bio = nil
	m.clearedFields[users.FieldBio] = struct{}{}
}

// BioCleared returns if the "bio" field was cleared in this mutation.
func (m *UsersMutation) BioCleared() bool {
	_, ok := m.clearedFields[users.FieldBio]
	return ok
}

// ResetBio resets all changes to the "bio" field.
func (m *UsersMutation) ResetBio() {
	m.bio = nil
	delete(m.clearedFields, users.FieldBio)
}

// SetAvatar sets the "avatar" field.
func (m *UsersMutation) SetAvatar(s string) {
	m.avatar = &s
}

// Avatar returns the value of the "avatar" field in the mutation.
func (m *UsersMutation) Avatar() (r string, exists bool) {
	v := m.avatar
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatar returns the old "avatar" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldAvatar(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatar is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatar requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatar: %w", err)
	}
	return oldValue.Avatar, nil
}

// ClearAvatar clears the value of the "avatar" field.
func (m *UsersMutation) ClearAvatar() {
	m.avatar = nil
	m.clearedFields[users.FieldAvatar] = struct{}{}
}

// AvatarCleared returns if the "avatar" field was cleared in this mutation.
func (m *UsersMutation) AvatarCleared() bool {
	_, ok := m.clearedFields[users.FieldAvatar]
	return ok
}

// ResetAvatar resets all changes to the "avatar" field.
func (m *UsersMutation) ResetAvatar() {
	m.avatar = nil
	delete(m.clearedFields, users.FieldAvatar)
}

// AddDeviceIDs adds the "devices" edge to the Devices entity by ids.
func (m *UsersMutation) AddDeviceIDs(ids ...uint64) {
	if m.devices == nil {
		m.devices = make(map[uint64]struct{})
	}
	for i := range ids {
		m.devices[ids[i]] = struct{}{}
	}
}

// ClearDevices clears the "devices" edge to the Devices entity.
func (m *UsersMutation) ClearDevices() {
	m.cleareddevices = true
}

// DevicesCleared reports if the "devices" edge to the Devices entity was cleared.
func (m *UsersMutation) DevicesCleared() bool {
	return m.cleareddevices
}

// RemoveDeviceIDs removes the "devices" edge to the Devices entity by IDs.
func (m *UsersMutation) RemoveDeviceIDs(ids ...uint64) {
	if m.removeddevices == nil {
		m.removeddevices = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.devices, ids[i])
		m.removeddevices[ids[i]] = struct{}{}
	}
}

// RemovedDevices returns the removed IDs of the "devices" edge to the Devices entity.
func (m *UsersMutation) RemovedDevicesIDs() (ids []uint64) {
	for id := range m.removeddevices {
		ids = append(ids, id)
	}
	return
}

// DevicesIDs returns the "devices" edge IDs in the mutation.
func (m *UsersMutation) DevicesIDs() (ids []uint64) {
	for id := range m.devices {
		ids = append(ids, id)
	}
	return
}

// ResetDevices resets all changes to the "devices" edge.
func (m *UsersMutation) ResetDevices() {
	m.devices = nil
	m.cleareddevices = false
	m.removeddevices = nil
}

// AddPlaylistIDs adds the "playlists" edge to the Playlists entity by ids.
func (m *UsersMutation) AddPlaylistIDs(ids ...uint64) {
	if m.playlists == nil {
		m.playlists = make(map[uint64]struct{})
	}
	for i := range ids {
		m.playlists[ids[i]] = struct{}{}
	}
}

// ClearPlaylists clears the "playlists" edge to the Playlists entity.
func (m *UsersMutation) ClearPlaylists() {
	m.clearedplaylists = true
}

// PlaylistsCleared reports if the "playlists" edge to the Playlists entity was cleared.
func (m *UsersMutation) PlaylistsCleared() bool {
	return m.clearedplaylists
}

// RemovePlaylistIDs removes the "playlists" edge to the Playlists entity by IDs.
func (m *UsersMutation) RemovePlaylistIDs(ids ...uint64) {
	if m.removedplaylists == nil {
		m.removedplaylists = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.playlists, ids[i])
		m.removedplaylists[ids[i]] = struct{}{}
	}
}

// RemovedPlaylists returns the removed IDs of the "playlists" edge to the Playlists entity.
func (m *UsersMutation) RemovedPlaylistsIDs() (ids []uint64) {
	for id := range m.removedplaylists {
		ids = append(ids, id)
	}
	return
}

// PlaylistsIDs returns the "playlists" edge IDs in the mutation.
func (m *UsersMutation) PlaylistsIDs() (ids []uint64) {
	for id := range m.playlists {
		ids = append(ids, id)
	}
	return
}

// ResetPlaylists resets all changes to the "playlists" edge.
func (m *UsersMutation) ResetPlaylists() {
	m.playlists = nil
	m.clearedplaylists = false
	m.removedplaylists = nil
}

// AddAlbumIDs adds the "albums" edge to the Albums entity by ids.
func (m *UsersMutation) AddAlbumIDs(ids ...uint64) {
	if m.albums == nil {
		m.albums = make(map[uint64]struct{})
	}
	for i := range ids {
		m.albums[ids[i]] = struct{}{}
	}
}

// ClearAlbums clears the "albums" edge to the Albums entity.
func (m *UsersMutation) ClearAlbums() {
	m.clearedalbums = true
}

// AlbumsCleared reports if the "albums" edge to the Albums entity was cleared.
func (m *UsersMutation) AlbumsCleared() bool {
	return m.clearedalbums
}

// RemoveAlbumIDs removes the "albums" edge to the Albums entity by IDs.
func (m *UsersMutation) RemoveAlbumIDs(ids ...uint64) {
	if m.removedalbums == nil {
		m.removedalbums = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.albums, ids[i])
		m.removedalbums[ids[i]] = struct{}{}
	}
}

// RemovedAlbums returns the removed IDs of the "albums" edge to the Albums entity.
func (m *UsersMutation) RemovedAlbumsIDs() (ids []uint64) {
	for id := range m.removedalbums {
		ids = append(ids, id)
	}
	return
}

// AlbumsIDs returns the "albums" edge IDs in the mutation.
func (m *UsersMutation) AlbumsIDs() (ids []uint64) {
	for id := range m.albums {
		ids = append(ids, id)
	}
	return
}

// ResetAlbums resets all changes to the "albums" edge.
func (m *UsersMutation) ResetAlbums() {
	m.albums = nil
	m.clearedalbums = false
	m.removedalbums = nil
}

// AddMusicIDs adds the "musics" edge to the Musics entity by ids.
func (m *UsersMutation) AddMusicIDs(ids ...uint64) {
	if m.musics == nil {
		m.musics = make(map[uint64]struct{})
	}
	for i := range ids {
		m.musics[ids[i]] = struct{}{}
	}
}

// ClearMusics clears the "musics" edge to the Musics entity.
func (m *UsersMutation) ClearMusics() {
	m.clearedmusics = true
}

// MusicsCleared reports if the "musics" edge to the Musics entity was cleared.
func (m *UsersMutation) MusicsCleared() bool {
	return m.clearedmusics
}

// RemoveMusicIDs removes the "musics" edge to the Musics entity by IDs.
func (m *UsersMutation) RemoveMusicIDs(ids ...uint64) {
	if m.removedmusics == nil {
		m.removedmusics = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.musics, ids[i])
		m.removedmusics[ids[i]] = struct{}{}
	}
}

// RemovedMusics returns the removed IDs of the "musics" edge to the Musics entity.
func (m *UsersMutation) RemovedMusicsIDs() (ids []uint64) {
	for id := range m.removedmusics {
		ids = append(ids, id)
	}
	return
}

// MusicsIDs returns the "musics" edge IDs in the mutation.
func (m *UsersMutation) MusicsIDs() (ids []uint64) {
	for id := range m.musics {
		ids = append(ids, id)
	}
	return
}

// ResetMusics resets all changes to the "musics" edge.
func (m *UsersMutation) ResetMusics() {
	m.musics = nil
	m.clearedmusics = false
	m.removedmusics = nil
}

// Where appends a list predicates to the UsersMutation builder.
func (m *UsersMutation) Where(ps ...predicate.Users) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UsersMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UsersMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Users, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UsersMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UsersMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Users).
func (m *UsersMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UsersMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.create_time != nil {
		fields = append(fields, users.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, users.FieldUpdateTime)
	}
	if m.username != nil {
		fields = append(fields, users.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, users.FieldPassword)
	}
	if m.email != nil {
		fields = append(fields, users.FieldEmail)
	}
	if m.name != nil {
		fields = append(fields, users.FieldName)
	}
	if m.bio != nil {
		fields = append(fields, users.FieldBio)
	}
	if m.avatar != nil {
		fields = append(fields, users.FieldAvatar)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UsersMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case users.FieldCreateTime:
		return m.CreateTime()
	case users.FieldUpdateTime:
		return m.UpdateTime()
	case users.FieldUsername:
		return m.Username()
	case users.FieldPassword:
		return m.Password()
	case users.FieldEmail:
		return m.Email()
	case users.FieldName:
		return m.Name()
	case users.FieldBio:
		return m.Bio()
	case users.FieldAvatar:
		return m.Avatar()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UsersMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case users.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case users.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case users.FieldUsername:
		return m.OldUsername(ctx)
	case users.FieldPassword:
		return m.OldPassword(ctx)
	case users.FieldEmail:
		return m.OldEmail(ctx)
	case users.FieldName:
		return m.OldName(ctx)
	case users.FieldBio:
		return m.OldBio(ctx)
	case users.FieldAvatar:
		return m.OldAvatar(ctx)
	}
	return nil, fmt.Errorf("unknown Users field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UsersMutation) SetField(name string, value ent.Value) error {
	switch name {
	case users.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case users.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case users.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case users.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case users.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case users.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case users.FieldBio:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBio(v)
		return nil
	case users.FieldAvatar:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatar(v)
		return nil
	}
	return fmt.Errorf("unknown Users field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UsersMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UsersMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UsersMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Users numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UsersMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(users.FieldPassword) {
		fields = append(fields, users.FieldPassword)
	}
	if m.FieldCleared(users.FieldEmail) {
		fields = append(fields, users.FieldEmail)
	}
	if m.FieldCleared(users.FieldName) {
		fields = append(fields, users.FieldName)
	}
	if m.FieldCleared(users.FieldBio) {
		fields = append(fields, users.FieldBio)
	}
	if m.FieldCleared(users.FieldAvatar) {
		fields = append(fields, users.FieldAvatar)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UsersMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UsersMutation) ClearField(name string) error {
	switch name {
	case users.FieldPassword:
		m.ClearPassword()
		return nil
	case users.FieldEmail:
		m.ClearEmail()
		return nil
	case users.FieldName:
		m.ClearName()
		return nil
	case users.FieldBio:
		m.ClearBio()
		return nil
	case users.FieldAvatar:
		m.ClearAvatar()
		return nil
	}
	return fmt.Errorf("unknown Users nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UsersMutation) ResetField(name string) error {
	switch name {
	case users.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case users.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case users.FieldUsername:
		m.ResetUsername()
		return nil
	case users.FieldPassword:
		m.ResetPassword()
		return nil
	case users.FieldEmail:
		m.ResetEmail()
		return nil
	case users.FieldName:
		m.ResetName()
		return nil
	case users.FieldBio:
		m.ResetBio()
		return nil
	case users.FieldAvatar:
		m.ResetAvatar()
		return nil
	}
	return fmt.Errorf("unknown Users field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UsersMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.devices != nil {
		edges = append(edges, users.EdgeDevices)
	}
	if m.playlists != nil {
		edges = append(edges, users.EdgePlaylists)
	}
	if m.albums != nil {
		edges = append(edges, users.EdgeAlbums)
	}
	if m.musics != nil {
		edges = append(edges, users.EdgeMusics)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UsersMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case users.EdgeDevices:
		ids := make([]ent.Value, 0, len(m.devices))
		for id := range m.devices {
			ids = append(ids, id)
		}
		return ids
	case users.EdgePlaylists:
		ids := make([]ent.Value, 0, len(m.playlists))
		for id := range m.playlists {
			ids = append(ids, id)
		}
		return ids
	case users.EdgeAlbums:
		ids := make([]ent.Value, 0, len(m.albums))
		for id := range m.albums {
			ids = append(ids, id)
		}
		return ids
	case users.EdgeMusics:
		ids := make([]ent.Value, 0, len(m.musics))
		for id := range m.musics {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UsersMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removeddevices != nil {
		edges = append(edges, users.EdgeDevices)
	}
	if m.removedplaylists != nil {
		edges = append(edges, users.EdgePlaylists)
	}
	if m.removedalbums != nil {
		edges = append(edges, users.EdgeAlbums)
	}
	if m.removedmusics != nil {
		edges = append(edges, users.EdgeMusics)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UsersMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case users.EdgeDevices:
		ids := make([]ent.Value, 0, len(m.removeddevices))
		for id := range m.removeddevices {
			ids = append(ids, id)
		}
		return ids
	case users.EdgePlaylists:
		ids := make([]ent.Value, 0, len(m.removedplaylists))
		for id := range m.removedplaylists {
			ids = append(ids, id)
		}
		return ids
	case users.EdgeAlbums:
		ids := make([]ent.Value, 0, len(m.removedalbums))
		for id := range m.removedalbums {
			ids = append(ids, id)
		}
		return ids
	case users.EdgeMusics:
		ids := make([]ent.Value, 0, len(m.removedmusics))
		for id := range m.removedmusics {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UsersMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.cleareddevices {
		edges = append(edges, users.EdgeDevices)
	}
	if m.clearedplaylists {
		edges = append(edges, users.EdgePlaylists)
	}
	if m.clearedalbums {
		edges = append(edges, users.EdgeAlbums)
	}
	if m.clearedmusics {
		edges = append(edges, users.EdgeMusics)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UsersMutation) EdgeCleared(name string) bool {
	switch name {
	case users.EdgeDevices:
		return m.cleareddevices
	case users.EdgePlaylists:
		return m.clearedplaylists
	case users.EdgeAlbums:
		return m.clearedalbums
	case users.EdgeMusics:
		return m.clearedmusics
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UsersMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Users unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UsersMutation) ResetEdge(name string) error {
	switch name {
	case users.EdgeDevices:
		m.ResetDevices()
		return nil
	case users.EdgePlaylists:
		m.ResetPlaylists()
		return nil
	case users.EdgeAlbums:
		m.ResetAlbums()
		return nil
	case users.EdgeMusics:
		m.ResetMusics()
		return nil
	}
	return fmt.Errorf("unknown Users edge %s", name)
}

// VideosMutation represents an operation that mutates the Videos nodes in the graph.
type VideosMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Videos, error)
	predicates    []predicate.Videos
}

var _ ent.Mutation = (*VideosMutation)(nil)

// videosOption allows management of the mutation configuration using functional options.
type videosOption func(*VideosMutation)

// newVideosMutation creates new mutation for the Videos entity.
func newVideosMutation(c config, op Op, opts ...videosOption) *VideosMutation {
	m := &VideosMutation{
		config:        c,
		op:            op,
		typ:           TypeVideos,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVideosID sets the ID field of the mutation.
func withVideosID(id int) videosOption {
	return func(m *VideosMutation) {
		var (
			err   error
			once  sync.Once
			value *Videos
		)
		m.oldValue = func(ctx context.Context) (*Videos, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Videos.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVideos sets the old Videos of the mutation.
func withVideos(node *Videos) videosOption {
	return func(m *VideosMutation) {
		m.oldValue = func(context.Context) (*Videos, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VideosMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VideosMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VideosMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VideosMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Videos.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the VideosMutation builder.
func (m *VideosMutation) Where(ps ...predicate.Videos) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the VideosMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *VideosMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Videos, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *VideosMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *VideosMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Videos).
func (m *VideosMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VideosMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VideosMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VideosMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown Videos field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VideosMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Videos field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VideosMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VideosMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VideosMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown Videos numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VideosMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VideosMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VideosMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Videos nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VideosMutation) ResetField(name string) error {
	return fmt.Errorf("unknown Videos field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VideosMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VideosMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VideosMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VideosMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VideosMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VideosMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VideosMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Videos unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VideosMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Videos edge %s", name)
}
