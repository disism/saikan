// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/disism/saikan/ent/albums"
	"github.com/disism/saikan/ent/artists"
	"github.com/disism/saikan/ent/files"
	"github.com/disism/saikan/ent/musics"
	"github.com/disism/saikan/ent/playlists"
	"github.com/disism/saikan/ent/predicate"
	"github.com/disism/saikan/ent/users"
)

// MusicsUpdate is the builder for updating Musics entities.
type MusicsUpdate struct {
	config
	hooks    []Hook
	mutation *MusicsMutation
}

// Where appends a list predicates to the MusicsUpdate builder.
func (mu *MusicsUpdate) Where(ps ...predicate.Musics) *MusicsUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetUpdateTime sets the "update_time" field.
func (mu *MusicsUpdate) SetUpdateTime(t time.Time) *MusicsUpdate {
	mu.mutation.SetUpdateTime(t)
	return mu
}

// SetName sets the "name" field.
func (mu *MusicsUpdate) SetName(s string) *MusicsUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mu *MusicsUpdate) SetNillableName(s *string) *MusicsUpdate {
	if s != nil {
		mu.SetName(*s)
	}
	return mu
}

// SetDescription sets the "description" field.
func (mu *MusicsUpdate) SetDescription(s string) *MusicsUpdate {
	mu.mutation.SetDescription(s)
	return mu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (mu *MusicsUpdate) SetNillableDescription(s *string) *MusicsUpdate {
	if s != nil {
		mu.SetDescription(*s)
	}
	return mu
}

// ClearDescription clears the value of the "description" field.
func (mu *MusicsUpdate) ClearDescription() *MusicsUpdate {
	mu.mutation.ClearDescription()
	return mu
}

// AddUserIDs adds the "users" edge to the Users entity by IDs.
func (mu *MusicsUpdate) AddUserIDs(ids ...uint64) *MusicsUpdate {
	mu.mutation.AddUserIDs(ids...)
	return mu
}

// AddUsers adds the "users" edges to the Users entity.
func (mu *MusicsUpdate) AddUsers(u ...*Users) *MusicsUpdate {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return mu.AddUserIDs(ids...)
}

// SetFileID sets the "file" edge to the Files entity by ID.
func (mu *MusicsUpdate) SetFileID(id uint64) *MusicsUpdate {
	mu.mutation.SetFileID(id)
	return mu
}

// SetFile sets the "file" edge to the Files entity.
func (mu *MusicsUpdate) SetFile(f *Files) *MusicsUpdate {
	return mu.SetFileID(f.ID)
}

// AddArtistIDs adds the "artists" edge to the Artists entity by IDs.
func (mu *MusicsUpdate) AddArtistIDs(ids ...uint64) *MusicsUpdate {
	mu.mutation.AddArtistIDs(ids...)
	return mu
}

// AddArtists adds the "artists" edges to the Artists entity.
func (mu *MusicsUpdate) AddArtists(a ...*Artists) *MusicsUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mu.AddArtistIDs(ids...)
}

// AddPlaylistIDs adds the "playlists" edge to the Playlists entity by IDs.
func (mu *MusicsUpdate) AddPlaylistIDs(ids ...uint64) *MusicsUpdate {
	mu.mutation.AddPlaylistIDs(ids...)
	return mu
}

// AddPlaylists adds the "playlists" edges to the Playlists entity.
func (mu *MusicsUpdate) AddPlaylists(p ...*Playlists) *MusicsUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mu.AddPlaylistIDs(ids...)
}

// AddAlbumIDs adds the "albums" edge to the Albums entity by IDs.
func (mu *MusicsUpdate) AddAlbumIDs(ids ...uint64) *MusicsUpdate {
	mu.mutation.AddAlbumIDs(ids...)
	return mu
}

// AddAlbums adds the "albums" edges to the Albums entity.
func (mu *MusicsUpdate) AddAlbums(a ...*Albums) *MusicsUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mu.AddAlbumIDs(ids...)
}

// Mutation returns the MusicsMutation object of the builder.
func (mu *MusicsUpdate) Mutation() *MusicsMutation {
	return mu.mutation
}

// ClearUsers clears all "users" edges to the Users entity.
func (mu *MusicsUpdate) ClearUsers() *MusicsUpdate {
	mu.mutation.ClearUsers()
	return mu
}

// RemoveUserIDs removes the "users" edge to Users entities by IDs.
func (mu *MusicsUpdate) RemoveUserIDs(ids ...uint64) *MusicsUpdate {
	mu.mutation.RemoveUserIDs(ids...)
	return mu
}

// RemoveUsers removes "users" edges to Users entities.
func (mu *MusicsUpdate) RemoveUsers(u ...*Users) *MusicsUpdate {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return mu.RemoveUserIDs(ids...)
}

// ClearFile clears the "file" edge to the Files entity.
func (mu *MusicsUpdate) ClearFile() *MusicsUpdate {
	mu.mutation.ClearFile()
	return mu
}

// ClearArtists clears all "artists" edges to the Artists entity.
func (mu *MusicsUpdate) ClearArtists() *MusicsUpdate {
	mu.mutation.ClearArtists()
	return mu
}

// RemoveArtistIDs removes the "artists" edge to Artists entities by IDs.
func (mu *MusicsUpdate) RemoveArtistIDs(ids ...uint64) *MusicsUpdate {
	mu.mutation.RemoveArtistIDs(ids...)
	return mu
}

// RemoveArtists removes "artists" edges to Artists entities.
func (mu *MusicsUpdate) RemoveArtists(a ...*Artists) *MusicsUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mu.RemoveArtistIDs(ids...)
}

// ClearPlaylists clears all "playlists" edges to the Playlists entity.
func (mu *MusicsUpdate) ClearPlaylists() *MusicsUpdate {
	mu.mutation.ClearPlaylists()
	return mu
}

// RemovePlaylistIDs removes the "playlists" edge to Playlists entities by IDs.
func (mu *MusicsUpdate) RemovePlaylistIDs(ids ...uint64) *MusicsUpdate {
	mu.mutation.RemovePlaylistIDs(ids...)
	return mu
}

// RemovePlaylists removes "playlists" edges to Playlists entities.
func (mu *MusicsUpdate) RemovePlaylists(p ...*Playlists) *MusicsUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mu.RemovePlaylistIDs(ids...)
}

// ClearAlbums clears all "albums" edges to the Albums entity.
func (mu *MusicsUpdate) ClearAlbums() *MusicsUpdate {
	mu.mutation.ClearAlbums()
	return mu
}

// RemoveAlbumIDs removes the "albums" edge to Albums entities by IDs.
func (mu *MusicsUpdate) RemoveAlbumIDs(ids ...uint64) *MusicsUpdate {
	mu.mutation.RemoveAlbumIDs(ids...)
	return mu
}

// RemoveAlbums removes "albums" edges to Albums entities.
func (mu *MusicsUpdate) RemoveAlbums(a ...*Albums) *MusicsUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mu.RemoveAlbumIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MusicsUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MusicsUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MusicsUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MusicsUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MusicsUpdate) defaults() {
	if _, ok := mu.mutation.UpdateTime(); !ok {
		v := musics.UpdateDefaultUpdateTime()
		mu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MusicsUpdate) check() error {
	if v, ok := mu.mutation.Description(); ok {
		if err := musics.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Musics.description": %w`, err)}
		}
	}
	if _, ok := mu.mutation.FileID(); mu.mutation.FileCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Musics.file"`)
	}
	return nil
}

func (mu *MusicsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(musics.Table, musics.Columns, sqlgraph.NewFieldSpec(musics.FieldID, field.TypeUint64))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.UpdateTime(); ok {
		_spec.SetField(musics.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.SetField(musics.FieldName, field.TypeString, value)
	}
	if value, ok := mu.mutation.Description(); ok {
		_spec.SetField(musics.FieldDescription, field.TypeString, value)
	}
	if mu.mutation.DescriptionCleared() {
		_spec.ClearField(musics.FieldDescription, field.TypeString)
	}
	if mu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   musics.UsersTable,
			Columns: musics.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !mu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   musics.UsersTable,
			Columns: musics.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   musics.UsersTable,
			Columns: musics.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   musics.FileTable,
			Columns: []string{musics.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(files.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   musics.FileTable,
			Columns: []string{musics.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(files.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   musics.ArtistsTable,
			Columns: musics.ArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artists.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedArtistsIDs(); len(nodes) > 0 && !mu.mutation.ArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   musics.ArtistsTable,
			Columns: musics.ArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artists.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ArtistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   musics.ArtistsTable,
			Columns: musics.ArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artists.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.PlaylistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   musics.PlaylistsTable,
			Columns: musics.PlaylistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlists.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedPlaylistsIDs(); len(nodes) > 0 && !mu.mutation.PlaylistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   musics.PlaylistsTable,
			Columns: musics.PlaylistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlists.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.PlaylistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   musics.PlaylistsTable,
			Columns: musics.PlaylistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlists.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.AlbumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   musics.AlbumsTable,
			Columns: musics.AlbumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(albums.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedAlbumsIDs(); len(nodes) > 0 && !mu.mutation.AlbumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   musics.AlbumsTable,
			Columns: musics.AlbumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(albums.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.AlbumsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   musics.AlbumsTable,
			Columns: musics.AlbumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(albums.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{musics.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MusicsUpdateOne is the builder for updating a single Musics entity.
type MusicsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MusicsMutation
}

// SetUpdateTime sets the "update_time" field.
func (muo *MusicsUpdateOne) SetUpdateTime(t time.Time) *MusicsUpdateOne {
	muo.mutation.SetUpdateTime(t)
	return muo
}

// SetName sets the "name" field.
func (muo *MusicsUpdateOne) SetName(s string) *MusicsUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (muo *MusicsUpdateOne) SetNillableName(s *string) *MusicsUpdateOne {
	if s != nil {
		muo.SetName(*s)
	}
	return muo
}

// SetDescription sets the "description" field.
func (muo *MusicsUpdateOne) SetDescription(s string) *MusicsUpdateOne {
	muo.mutation.SetDescription(s)
	return muo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (muo *MusicsUpdateOne) SetNillableDescription(s *string) *MusicsUpdateOne {
	if s != nil {
		muo.SetDescription(*s)
	}
	return muo
}

// ClearDescription clears the value of the "description" field.
func (muo *MusicsUpdateOne) ClearDescription() *MusicsUpdateOne {
	muo.mutation.ClearDescription()
	return muo
}

// AddUserIDs adds the "users" edge to the Users entity by IDs.
func (muo *MusicsUpdateOne) AddUserIDs(ids ...uint64) *MusicsUpdateOne {
	muo.mutation.AddUserIDs(ids...)
	return muo
}

// AddUsers adds the "users" edges to the Users entity.
func (muo *MusicsUpdateOne) AddUsers(u ...*Users) *MusicsUpdateOne {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return muo.AddUserIDs(ids...)
}

// SetFileID sets the "file" edge to the Files entity by ID.
func (muo *MusicsUpdateOne) SetFileID(id uint64) *MusicsUpdateOne {
	muo.mutation.SetFileID(id)
	return muo
}

// SetFile sets the "file" edge to the Files entity.
func (muo *MusicsUpdateOne) SetFile(f *Files) *MusicsUpdateOne {
	return muo.SetFileID(f.ID)
}

// AddArtistIDs adds the "artists" edge to the Artists entity by IDs.
func (muo *MusicsUpdateOne) AddArtistIDs(ids ...uint64) *MusicsUpdateOne {
	muo.mutation.AddArtistIDs(ids...)
	return muo
}

// AddArtists adds the "artists" edges to the Artists entity.
func (muo *MusicsUpdateOne) AddArtists(a ...*Artists) *MusicsUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return muo.AddArtistIDs(ids...)
}

// AddPlaylistIDs adds the "playlists" edge to the Playlists entity by IDs.
func (muo *MusicsUpdateOne) AddPlaylistIDs(ids ...uint64) *MusicsUpdateOne {
	muo.mutation.AddPlaylistIDs(ids...)
	return muo
}

// AddPlaylists adds the "playlists" edges to the Playlists entity.
func (muo *MusicsUpdateOne) AddPlaylists(p ...*Playlists) *MusicsUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return muo.AddPlaylistIDs(ids...)
}

// AddAlbumIDs adds the "albums" edge to the Albums entity by IDs.
func (muo *MusicsUpdateOne) AddAlbumIDs(ids ...uint64) *MusicsUpdateOne {
	muo.mutation.AddAlbumIDs(ids...)
	return muo
}

// AddAlbums adds the "albums" edges to the Albums entity.
func (muo *MusicsUpdateOne) AddAlbums(a ...*Albums) *MusicsUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return muo.AddAlbumIDs(ids...)
}

// Mutation returns the MusicsMutation object of the builder.
func (muo *MusicsUpdateOne) Mutation() *MusicsMutation {
	return muo.mutation
}

// ClearUsers clears all "users" edges to the Users entity.
func (muo *MusicsUpdateOne) ClearUsers() *MusicsUpdateOne {
	muo.mutation.ClearUsers()
	return muo
}

// RemoveUserIDs removes the "users" edge to Users entities by IDs.
func (muo *MusicsUpdateOne) RemoveUserIDs(ids ...uint64) *MusicsUpdateOne {
	muo.mutation.RemoveUserIDs(ids...)
	return muo
}

// RemoveUsers removes "users" edges to Users entities.
func (muo *MusicsUpdateOne) RemoveUsers(u ...*Users) *MusicsUpdateOne {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return muo.RemoveUserIDs(ids...)
}

// ClearFile clears the "file" edge to the Files entity.
func (muo *MusicsUpdateOne) ClearFile() *MusicsUpdateOne {
	muo.mutation.ClearFile()
	return muo
}

// ClearArtists clears all "artists" edges to the Artists entity.
func (muo *MusicsUpdateOne) ClearArtists() *MusicsUpdateOne {
	muo.mutation.ClearArtists()
	return muo
}

// RemoveArtistIDs removes the "artists" edge to Artists entities by IDs.
func (muo *MusicsUpdateOne) RemoveArtistIDs(ids ...uint64) *MusicsUpdateOne {
	muo.mutation.RemoveArtistIDs(ids...)
	return muo
}

// RemoveArtists removes "artists" edges to Artists entities.
func (muo *MusicsUpdateOne) RemoveArtists(a ...*Artists) *MusicsUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return muo.RemoveArtistIDs(ids...)
}

// ClearPlaylists clears all "playlists" edges to the Playlists entity.
func (muo *MusicsUpdateOne) ClearPlaylists() *MusicsUpdateOne {
	muo.mutation.ClearPlaylists()
	return muo
}

// RemovePlaylistIDs removes the "playlists" edge to Playlists entities by IDs.
func (muo *MusicsUpdateOne) RemovePlaylistIDs(ids ...uint64) *MusicsUpdateOne {
	muo.mutation.RemovePlaylistIDs(ids...)
	return muo
}

// RemovePlaylists removes "playlists" edges to Playlists entities.
func (muo *MusicsUpdateOne) RemovePlaylists(p ...*Playlists) *MusicsUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return muo.RemovePlaylistIDs(ids...)
}

// ClearAlbums clears all "albums" edges to the Albums entity.
func (muo *MusicsUpdateOne) ClearAlbums() *MusicsUpdateOne {
	muo.mutation.ClearAlbums()
	return muo
}

// RemoveAlbumIDs removes the "albums" edge to Albums entities by IDs.
func (muo *MusicsUpdateOne) RemoveAlbumIDs(ids ...uint64) *MusicsUpdateOne {
	muo.mutation.RemoveAlbumIDs(ids...)
	return muo
}

// RemoveAlbums removes "albums" edges to Albums entities.
func (muo *MusicsUpdateOne) RemoveAlbums(a ...*Albums) *MusicsUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return muo.RemoveAlbumIDs(ids...)
}

// Where appends a list predicates to the MusicsUpdate builder.
func (muo *MusicsUpdateOne) Where(ps ...predicate.Musics) *MusicsUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MusicsUpdateOne) Select(field string, fields ...string) *MusicsUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Musics entity.
func (muo *MusicsUpdateOne) Save(ctx context.Context) (*Musics, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MusicsUpdateOne) SaveX(ctx context.Context) *Musics {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MusicsUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MusicsUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MusicsUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdateTime(); !ok {
		v := musics.UpdateDefaultUpdateTime()
		muo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MusicsUpdateOne) check() error {
	if v, ok := muo.mutation.Description(); ok {
		if err := musics.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Musics.description": %w`, err)}
		}
	}
	if _, ok := muo.mutation.FileID(); muo.mutation.FileCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Musics.file"`)
	}
	return nil
}

func (muo *MusicsUpdateOne) sqlSave(ctx context.Context) (_node *Musics, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(musics.Table, musics.Columns, sqlgraph.NewFieldSpec(musics.FieldID, field.TypeUint64))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Musics.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, musics.FieldID)
		for _, f := range fields {
			if !musics.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != musics.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.UpdateTime(); ok {
		_spec.SetField(musics.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.SetField(musics.FieldName, field.TypeString, value)
	}
	if value, ok := muo.mutation.Description(); ok {
		_spec.SetField(musics.FieldDescription, field.TypeString, value)
	}
	if muo.mutation.DescriptionCleared() {
		_spec.ClearField(musics.FieldDescription, field.TypeString)
	}
	if muo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   musics.UsersTable,
			Columns: musics.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !muo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   musics.UsersTable,
			Columns: musics.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   musics.UsersTable,
			Columns: musics.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   musics.FileTable,
			Columns: []string{musics.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(files.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   musics.FileTable,
			Columns: []string{musics.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(files.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   musics.ArtistsTable,
			Columns: musics.ArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artists.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedArtistsIDs(); len(nodes) > 0 && !muo.mutation.ArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   musics.ArtistsTable,
			Columns: musics.ArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artists.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ArtistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   musics.ArtistsTable,
			Columns: musics.ArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artists.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.PlaylistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   musics.PlaylistsTable,
			Columns: musics.PlaylistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlists.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedPlaylistsIDs(); len(nodes) > 0 && !muo.mutation.PlaylistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   musics.PlaylistsTable,
			Columns: musics.PlaylistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlists.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.PlaylistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   musics.PlaylistsTable,
			Columns: musics.PlaylistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlists.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.AlbumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   musics.AlbumsTable,
			Columns: musics.AlbumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(albums.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedAlbumsIDs(); len(nodes) > 0 && !muo.mutation.AlbumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   musics.AlbumsTable,
			Columns: musics.AlbumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(albums.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.AlbumsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   musics.AlbumsTable,
			Columns: musics.AlbumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(albums.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Musics{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{musics.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
