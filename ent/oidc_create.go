// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/disism/saikan/ent/oidc"
)

// OidcCreate is the builder for creating a Oidc entity.
type OidcCreate struct {
	config
	mutation *OidcMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (oc *OidcCreate) SetCreateTime(t time.Time) *OidcCreate {
	oc.mutation.SetCreateTime(t)
	return oc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (oc *OidcCreate) SetNillableCreateTime(t *time.Time) *OidcCreate {
	if t != nil {
		oc.SetCreateTime(*t)
	}
	return oc
}

// SetUpdateTime sets the "update_time" field.
func (oc *OidcCreate) SetUpdateTime(t time.Time) *OidcCreate {
	oc.mutation.SetUpdateTime(t)
	return oc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (oc *OidcCreate) SetNillableUpdateTime(t *time.Time) *OidcCreate {
	if t != nil {
		oc.SetUpdateTime(*t)
	}
	return oc
}

// SetName sets the "name" field.
func (oc *OidcCreate) SetName(s string) *OidcCreate {
	oc.mutation.SetName(s)
	return oc
}

// SetConfigurationEndpoint sets the "configuration_endpoint" field.
func (oc *OidcCreate) SetConfigurationEndpoint(s string) *OidcCreate {
	oc.mutation.SetConfigurationEndpoint(s)
	return oc
}

// SetID sets the "id" field.
func (oc *OidcCreate) SetID(u uint64) *OidcCreate {
	oc.mutation.SetID(u)
	return oc
}

// Mutation returns the OidcMutation object of the builder.
func (oc *OidcCreate) Mutation() *OidcMutation {
	return oc.mutation
}

// Save creates the Oidc in the database.
func (oc *OidcCreate) Save(ctx context.Context) (*Oidc, error) {
	oc.defaults()
	return withHooks(ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OidcCreate) SaveX(ctx context.Context) *Oidc {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OidcCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OidcCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OidcCreate) defaults() {
	if _, ok := oc.mutation.CreateTime(); !ok {
		v := oidc.DefaultCreateTime()
		oc.mutation.SetCreateTime(v)
	}
	if _, ok := oc.mutation.UpdateTime(); !ok {
		v := oidc.DefaultUpdateTime()
		oc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OidcCreate) check() error {
	if _, ok := oc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Oidc.create_time"`)}
	}
	if _, ok := oc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Oidc.update_time"`)}
	}
	if _, ok := oc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Oidc.name"`)}
	}
	if _, ok := oc.mutation.ConfigurationEndpoint(); !ok {
		return &ValidationError{Name: "configuration_endpoint", err: errors.New(`ent: missing required field "Oidc.configuration_endpoint"`)}
	}
	return nil
}

func (oc *OidcCreate) sqlSave(ctx context.Context) (*Oidc, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *OidcCreate) createSpec() (*Oidc, *sqlgraph.CreateSpec) {
	var (
		_node = &Oidc{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(oidc.Table, sqlgraph.NewFieldSpec(oidc.FieldID, field.TypeUint64))
	)
	if id, ok := oc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := oc.mutation.CreateTime(); ok {
		_spec.SetField(oidc.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := oc.mutation.UpdateTime(); ok {
		_spec.SetField(oidc.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := oc.mutation.Name(); ok {
		_spec.SetField(oidc.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := oc.mutation.ConfigurationEndpoint(); ok {
		_spec.SetField(oidc.FieldConfigurationEndpoint, field.TypeString, value)
		_node.ConfigurationEndpoint = value
	}
	return _node, _spec
}

// OidcCreateBulk is the builder for creating many Oidc entities in bulk.
type OidcCreateBulk struct {
	config
	err      error
	builders []*OidcCreate
}

// Save creates the Oidc entities in the database.
func (ocb *OidcCreateBulk) Save(ctx context.Context) ([]*Oidc, error) {
	if ocb.err != nil {
		return nil, ocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Oidc, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OidcMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OidcCreateBulk) SaveX(ctx context.Context) []*Oidc {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OidcCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OidcCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}
