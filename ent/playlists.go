// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/disism/saikan/ent/images"
	"github.com/disism/saikan/ent/playlists"
	"github.com/disism/saikan/ent/users"
)

// Playlists is the model entity for the Playlists schema.
type Playlists struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Private holds the value of the "private" field.
	Private bool `json:"private,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlaylistsQuery when eager-loading is set.
	Edges            PlaylistsEdges `json:"edges"`
	images_playlists *uint64
	users_playlists  *uint64
	selectValues     sql.SelectValues
}

// PlaylistsEdges holds the relations/edges for other nodes in the graph.
type PlaylistsEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Users `json:"owner,omitempty"`
	// Musics holds the value of the musics edge.
	Musics []*Musics `json:"musics,omitempty"`
	// Image holds the value of the image edge.
	Image *Images `json:"image,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlaylistsEdges) OwnerOrErr() (*Users, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: users.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// MusicsOrErr returns the Musics value or an error if the edge
// was not loaded in eager-loading.
func (e PlaylistsEdges) MusicsOrErr() ([]*Musics, error) {
	if e.loadedTypes[1] {
		return e.Musics, nil
	}
	return nil, &NotLoadedError{edge: "musics"}
}

// ImageOrErr returns the Image value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlaylistsEdges) ImageOrErr() (*Images, error) {
	if e.loadedTypes[2] {
		if e.Image == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: images.Label}
		}
		return e.Image, nil
	}
	return nil, &NotLoadedError{edge: "image"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Playlists) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case playlists.FieldPrivate:
			values[i] = new(sql.NullBool)
		case playlists.FieldID:
			values[i] = new(sql.NullInt64)
		case playlists.FieldName, playlists.FieldDescription:
			values[i] = new(sql.NullString)
		case playlists.FieldCreateTime, playlists.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case playlists.ForeignKeys[0]: // images_playlists
			values[i] = new(sql.NullInt64)
		case playlists.ForeignKeys[1]: // users_playlists
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Playlists fields.
func (pl *Playlists) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case playlists.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pl.ID = uint64(value.Int64)
		case playlists.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				pl.CreateTime = value.Time
			}
		case playlists.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				pl.UpdateTime = value.Time
			}
		case playlists.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pl.Name = value.String
			}
		case playlists.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pl.Description = value.String
			}
		case playlists.FieldPrivate:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field private", values[i])
			} else if value.Valid {
				pl.Private = value.Bool
			}
		case playlists.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field images_playlists", value)
			} else if value.Valid {
				pl.images_playlists = new(uint64)
				*pl.images_playlists = uint64(value.Int64)
			}
		case playlists.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field users_playlists", value)
			} else if value.Valid {
				pl.users_playlists = new(uint64)
				*pl.users_playlists = uint64(value.Int64)
			}
		default:
			pl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Playlists.
// This includes values selected through modifiers, order, etc.
func (pl *Playlists) Value(name string) (ent.Value, error) {
	return pl.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Playlists entity.
func (pl *Playlists) QueryOwner() *UsersQuery {
	return NewPlaylistsClient(pl.config).QueryOwner(pl)
}

// QueryMusics queries the "musics" edge of the Playlists entity.
func (pl *Playlists) QueryMusics() *MusicsQuery {
	return NewPlaylistsClient(pl.config).QueryMusics(pl)
}

// QueryImage queries the "image" edge of the Playlists entity.
func (pl *Playlists) QueryImage() *ImagesQuery {
	return NewPlaylistsClient(pl.config).QueryImage(pl)
}

// Update returns a builder for updating this Playlists.
// Note that you need to call Playlists.Unwrap() before calling this method if this Playlists
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *Playlists) Update() *PlaylistsUpdateOne {
	return NewPlaylistsClient(pl.config).UpdateOne(pl)
}

// Unwrap unwraps the Playlists entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pl *Playlists) Unwrap() *Playlists {
	_tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("ent: Playlists is not a transactional entity")
	}
	pl.config.driver = _tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *Playlists) String() string {
	var builder strings.Builder
	builder.WriteString("Playlists(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pl.ID))
	builder.WriteString("create_time=")
	builder.WriteString(pl.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(pl.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pl.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pl.Description)
	builder.WriteString(", ")
	builder.WriteString("private=")
	builder.WriteString(fmt.Sprintf("%v", pl.Private))
	builder.WriteByte(')')
	return builder.String()
}

// PlaylistsSlice is a parsable slice of Playlists.
type PlaylistsSlice []*Playlists
