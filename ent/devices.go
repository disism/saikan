// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/disism/saikan/ent/devices"
	"github.com/disism/saikan/ent/users"
)

// Devices is the model entity for the Devices schema.
type Devices struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// IP holds the value of the "ip" field.
	IP string `json:"ip,omitempty"`
	// Device holds the value of the "device" field.
	Device string `json:"device,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DevicesQuery when eager-loading is set.
	Edges         DevicesEdges `json:"edges"`
	users_devices *uint64
	selectValues  sql.SelectValues
}

// DevicesEdges holds the relations/edges for other nodes in the graph.
type DevicesEdges struct {
	// User holds the value of the user edge.
	User *Users `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DevicesEdges) UserOrErr() (*Users, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: users.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Devices) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case devices.FieldID:
			values[i] = new(sql.NullInt64)
		case devices.FieldIP, devices.FieldDevice:
			values[i] = new(sql.NullString)
		case devices.FieldCreateTime, devices.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case devices.ForeignKeys[0]: // users_devices
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Devices fields.
func (d *Devices) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case devices.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = uint64(value.Int64)
		case devices.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				d.CreateTime = value.Time
			}
		case devices.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				d.UpdateTime = value.Time
			}
		case devices.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				d.IP = value.String
			}
		case devices.FieldDevice:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device", values[i])
			} else if value.Valid {
				d.Device = value.String
			}
		case devices.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field users_devices", value)
			} else if value.Valid {
				d.users_devices = new(uint64)
				*d.users_devices = uint64(value.Int64)
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Devices.
// This includes values selected through modifiers, order, etc.
func (d *Devices) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Devices entity.
func (d *Devices) QueryUser() *UsersQuery {
	return NewDevicesClient(d.config).QueryUser(d)
}

// Update returns a builder for updating this Devices.
// Note that you need to call Devices.Unwrap() before calling this method if this Devices
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Devices) Update() *DevicesUpdateOne {
	return NewDevicesClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Devices entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Devices) Unwrap() *Devices {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Devices is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Devices) String() string {
	var builder strings.Builder
	builder.WriteString("Devices(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("create_time=")
	builder.WriteString(d.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(d.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ip=")
	builder.WriteString(d.IP)
	builder.WriteString(", ")
	builder.WriteString("device=")
	builder.WriteString(d.Device)
	builder.WriteByte(')')
	return builder.String()
}

// DevicesSlice is a parsable slice of Devices.
type DevicesSlice []*Devices
